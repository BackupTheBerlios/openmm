set(CMAKE_SYSTEM_NAME Windows)
set(CMAKE_SYSTEM_PROCESSOR i686)
#set(CMAKE_SYSTEM_PROCESSOR x86_64)
set_property(GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS TRUE)

set(SDKVER "4.6")
set(SDKROOT "/usr/lib/gcc/${CMAKE_SYSTEM_PROCESSOR}-w64-mingw32/${SDKVER}")

set(CMAKE_C_COMPILER "${CMAKE_SYSTEM_PROCESSOR}-w64-mingw32-gcc")
set(CMAKE_CXX_COMPILER "${CMAKE_SYSTEM_PROCESSOR}-w64-mingw32-g++")
set(CMAKE_RC_COMPILER "${CMAKE_SYSTEM_PROCESSOR}-w64-mingw32-windres")
set(CMAKE_RC_COMPILE_OBJECT "<CMAKE_RC_COMPILER> -O coff <DEFINES> -i <SOURCE> -o <OBJECT>")

add_definitions(-DPOCO_STATIC)
set(CMAKE_C_STANDARD_LIBRARIES "${CMAKE_C_STANDARD_LIBRARIES} -liphlpapi -lws2_32")
set(CMAKE_CXX_STANDARD_LIBRARIES "${CMAKE_CXX_STANDARD_LIBRARIES} -liphlpapi -lws2_32")

# option -mwindows turns console app into windows app (w/o console window)
# this should also be achievable with option WIN32 in cmake command add_executable
set(CMAKE_C_FLAGS "-mwindows" CACHE STRING "additional cross compiling c flags" FORCE)
set(CMAKE_CXX_FLAGS "-mwindows" CACHE STRING "additional cross compiling cxx flags" FORCE)

set(CMAKE_FIND_ROOT_PATH "${SDKROOT}" "${CMAKE_INSTALL_PREFIX}")
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM BOTH)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
