/***************************************************************************|
|  Jamm - Just another multimedia ...                                       |
|         ... set of applications and libraries based on the UPnP-AV specs  |
|                                                                           |
|  Copyright (C) 2009                                                       |
|  JÃ¶rg Bakker (joerg'at'hakker'dot'de)                                     |
|                                                                           |
|  This file is part of Jamm.                                               |
|                                                                           |
|  Jamm is free software: you can redistribute it and/or modify             |
|  it under the terms of the GNU General Public License as published by     |
|  the Free Software Foundation version 3 of the License.                   |
|                                                                           |
|  Jamm is distributed in the hope that it will be useful,                  |
|  but WITHOUT ANY WARRANTY; without even the implied warranty of           |
|  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
|  GNU General Public License for more details.                             |
|                                                                           |
|  You should have received a copy of the GNU General Public License        |
|  along with this program.  If not, see <http://www.gnu.org/licenses/>.    |
***************************************************************************/

/***************************************************************************|
|                               WARNING                                     |
|        This file is generated by the jamm stub generator jammgen.         |
|       Don't edit, it will be overriden at the next run of jammgen.        |
***************************************************************************/

#include "MediaServerCtrl.h"

void
AVTransportController::SetAVTransportURI(const Jamm::ui4& InstanceID, const std::string& CurrentURI, const std::string& CurrentURIMetaData)
{
    Jamm::Action* pAction = m_pService->getAction("SetAVTransportURI")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    pAction->setArgument<std::string>("CurrentURI", CurrentURI);
    pAction->setArgument<std::string>("CurrentURIMetaData", CurrentURIMetaData);
    m_pService->sendAction(pAction);
}

void
AVTransportController::GetMediaInfo(const Jamm::ui4& InstanceID, Jamm::ui4& NrTracks, std::string& MediaDuration, std::string& CurrentURI, std::string& CurrentURIMetaData, std::string& NextURI, std::string& NextURIMetaData, std::string& PlayMedium, std::string& RecordMedium, std::string& WriteStatus)
{
    Jamm::Action* pAction = m_pService->getAction("GetMediaInfo")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    m_pService->sendAction(pAction);
    NrTracks = pAction->getArgument<Jamm::ui4>("NrTracks");
    MediaDuration = pAction->getArgument<std::string>("MediaDuration");
    CurrentURI = pAction->getArgument<std::string>("CurrentURI");
    CurrentURIMetaData = pAction->getArgument<std::string>("CurrentURIMetaData");
    NextURI = pAction->getArgument<std::string>("NextURI");
    NextURIMetaData = pAction->getArgument<std::string>("NextURIMetaData");
    PlayMedium = pAction->getArgument<std::string>("PlayMedium");
    RecordMedium = pAction->getArgument<std::string>("RecordMedium");
    WriteStatus = pAction->getArgument<std::string>("WriteStatus");
}

void
AVTransportController::GetTransportInfo(const Jamm::ui4& InstanceID, std::string& CurrentTransportState, std::string& CurrentTransportStatus, std::string& CurrentSpeed)
{
    Jamm::Action* pAction = m_pService->getAction("GetTransportInfo")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    m_pService->sendAction(pAction);
    CurrentTransportState = pAction->getArgument<std::string>("CurrentTransportState");
    CurrentTransportStatus = pAction->getArgument<std::string>("CurrentTransportStatus");
    CurrentSpeed = pAction->getArgument<std::string>("CurrentSpeed");
}

void
AVTransportController::GetPositionInfo(const Jamm::ui4& InstanceID, Jamm::ui4& Track, std::string& TrackDuration, std::string& TrackMetaData, std::string& TrackURI, std::string& RelTime, std::string& AbsTime, Jamm::i4& RelCount, Jamm::i4& AbsCount)
{
    Jamm::Action* pAction = m_pService->getAction("GetPositionInfo")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    m_pService->sendAction(pAction);
    Track = pAction->getArgument<Jamm::ui4>("Track");
    TrackDuration = pAction->getArgument<std::string>("TrackDuration");
    TrackMetaData = pAction->getArgument<std::string>("TrackMetaData");
    TrackURI = pAction->getArgument<std::string>("TrackURI");
    RelTime = pAction->getArgument<std::string>("RelTime");
    AbsTime = pAction->getArgument<std::string>("AbsTime");
    RelCount = pAction->getArgument<Jamm::i4>("RelCount");
    AbsCount = pAction->getArgument<Jamm::i4>("AbsCount");
}

void
AVTransportController::GetDeviceCapabilities(const Jamm::ui4& InstanceID, std::string& PlayMedia, std::string& RecMedia, std::string& RecQualityModes)
{
    Jamm::Action* pAction = m_pService->getAction("GetDeviceCapabilities")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    m_pService->sendAction(pAction);
    PlayMedia = pAction->getArgument<std::string>("PlayMedia");
    RecMedia = pAction->getArgument<std::string>("RecMedia");
    RecQualityModes = pAction->getArgument<std::string>("RecQualityModes");
}

void
AVTransportController::GetTransportSettings(const Jamm::ui4& InstanceID, std::string& PlayMode, std::string& RecQualityMode)
{
    Jamm::Action* pAction = m_pService->getAction("GetTransportSettings")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    m_pService->sendAction(pAction);
    PlayMode = pAction->getArgument<std::string>("PlayMode");
    RecQualityMode = pAction->getArgument<std::string>("RecQualityMode");
}

void
AVTransportController::Stop(const Jamm::ui4& InstanceID)
{
    Jamm::Action* pAction = m_pService->getAction("Stop")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    m_pService->sendAction(pAction);
}

void
AVTransportController::Play(const Jamm::ui4& InstanceID, const std::string& Speed)
{
    Jamm::Action* pAction = m_pService->getAction("Play")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    pAction->setArgument<std::string>("Speed", Speed);
    m_pService->sendAction(pAction);
}

void
AVTransportController::Pause(const Jamm::ui4& InstanceID)
{
    Jamm::Action* pAction = m_pService->getAction("Pause")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    m_pService->sendAction(pAction);
}

void
AVTransportController::Seek(const Jamm::ui4& InstanceID, const std::string& Unit, const std::string& Target)
{
    Jamm::Action* pAction = m_pService->getAction("Seek")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    pAction->setArgument<std::string>("Unit", Unit);
    pAction->setArgument<std::string>("Target", Target);
    m_pService->sendAction(pAction);
}

void
AVTransportController::Next(const Jamm::ui4& InstanceID)
{
    Jamm::Action* pAction = m_pService->getAction("Next")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    m_pService->sendAction(pAction);
}

void
AVTransportController::Previous(const Jamm::ui4& InstanceID)
{
    Jamm::Action* pAction = m_pService->getAction("Previous")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    m_pService->sendAction(pAction);
}

std::string
AVTransportController::_getLastChange()
{
    return m_pService->getStateVar<std::string>("LastChange");
}


void 
AVTransportController::_reqSetAVTransportURI(const Jamm::ui4& InstanceID, const std::string& CurrentURI, const std::string& CurrentURIMetaData)
{
    Jamm::Action* pAction = m_pService->getAction("SetAVTransportURI")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    pAction->setArgument<std::string>("CurrentURI", CurrentURI);
    pAction->setArgument<std::string>("CurrentURIMetaData", CurrentURIMetaData);
    Jamm::ActionThread<AVTransportController> thread(this, &AVTransportController::_threadSetAVTransportURI, pAction);
    thread.start();
}

void 
AVTransportController::_reqGetMediaInfo(const Jamm::ui4& InstanceID, )
{
    Jamm::Action* pAction = m_pService->getAction("GetMediaInfo")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    Jamm::ActionThread<AVTransportController> thread(this, &AVTransportController::_threadGetMediaInfo, pAction);
    thread.start();
}

void 
AVTransportController::_reqGetTransportInfo(const Jamm::ui4& InstanceID, )
{
    Jamm::Action* pAction = m_pService->getAction("GetTransportInfo")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    Jamm::ActionThread<AVTransportController> thread(this, &AVTransportController::_threadGetTransportInfo, pAction);
    thread.start();
}

void 
AVTransportController::_reqGetPositionInfo(const Jamm::ui4& InstanceID, )
{
    Jamm::Action* pAction = m_pService->getAction("GetPositionInfo")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    Jamm::ActionThread<AVTransportController> thread(this, &AVTransportController::_threadGetPositionInfo, pAction);
    thread.start();
}

void 
AVTransportController::_reqGetDeviceCapabilities(const Jamm::ui4& InstanceID, )
{
    Jamm::Action* pAction = m_pService->getAction("GetDeviceCapabilities")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    Jamm::ActionThread<AVTransportController> thread(this, &AVTransportController::_threadGetDeviceCapabilities, pAction);
    thread.start();
}

void 
AVTransportController::_reqGetTransportSettings(const Jamm::ui4& InstanceID, )
{
    Jamm::Action* pAction = m_pService->getAction("GetTransportSettings")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    Jamm::ActionThread<AVTransportController> thread(this, &AVTransportController::_threadGetTransportSettings, pAction);
    thread.start();
}

void 
AVTransportController::_reqStop(const Jamm::ui4& InstanceID)
{
    Jamm::Action* pAction = m_pService->getAction("Stop")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    Jamm::ActionThread<AVTransportController> thread(this, &AVTransportController::_threadStop, pAction);
    thread.start();
}

void 
AVTransportController::_reqPlay(const Jamm::ui4& InstanceID, const std::string& Speed)
{
    Jamm::Action* pAction = m_pService->getAction("Play")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    pAction->setArgument<std::string>("Speed", Speed);
    Jamm::ActionThread<AVTransportController> thread(this, &AVTransportController::_threadPlay, pAction);
    thread.start();
}

void 
AVTransportController::_reqPause(const Jamm::ui4& InstanceID)
{
    Jamm::Action* pAction = m_pService->getAction("Pause")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    Jamm::ActionThread<AVTransportController> thread(this, &AVTransportController::_threadPause, pAction);
    thread.start();
}

void 
AVTransportController::_reqSeek(const Jamm::ui4& InstanceID, const std::string& Unit, const std::string& Target)
{
    Jamm::Action* pAction = m_pService->getAction("Seek")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    pAction->setArgument<std::string>("Unit", Unit);
    pAction->setArgument<std::string>("Target", Target);
    Jamm::ActionThread<AVTransportController> thread(this, &AVTransportController::_threadSeek, pAction);
    thread.start();
}

void 
AVTransportController::_reqNext(const Jamm::ui4& InstanceID)
{
    Jamm::Action* pAction = m_pService->getAction("Next")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    Jamm::ActionThread<AVTransportController> thread(this, &AVTransportController::_threadNext, pAction);
    thread.start();
}

void 
AVTransportController::_reqPrevious(const Jamm::ui4& InstanceID)
{
    Jamm::Action* pAction = m_pService->getAction("Previous")->clone();
    pAction->setArgument<Jamm::ui4>("InstanceID", InstanceID);
    Jamm::ActionThread<AVTransportController> thread(this, &AVTransportController::_threadPrevious, pAction);
    thread.start();
}

void 
AVTransportController::_threadSetAVTransportURI(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
    std::string CurrentURI = pAction->getArgument<std::string>("CurrentURI");
    std::string CurrentURIMetaData = pAction->getArgument<std::string>("CurrentURIMetaData");
    _ansSetAVTransportURI(InstanceID, CurrentURI, CurrentURIMetaData);
}

void 
AVTransportController::_threadGetMediaInfo(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
    Jamm::ui4 NrTracks = pAction->getArgument<Jamm::ui4>("NrTracks");
    std::string MediaDuration = pAction->getArgument<std::string>("MediaDuration");
    std::string CurrentURI = pAction->getArgument<std::string>("CurrentURI");
    std::string CurrentURIMetaData = pAction->getArgument<std::string>("CurrentURIMetaData");
    std::string NextURI = pAction->getArgument<std::string>("NextURI");
    std::string NextURIMetaData = pAction->getArgument<std::string>("NextURIMetaData");
    std::string PlayMedium = pAction->getArgument<std::string>("PlayMedium");
    std::string RecordMedium = pAction->getArgument<std::string>("RecordMedium");
    std::string WriteStatus = pAction->getArgument<std::string>("WriteStatus");
    _ansGetMediaInfo(InstanceID, NrTracks, MediaDuration, CurrentURI, CurrentURIMetaData, NextURI, NextURIMetaData, PlayMedium, RecordMedium, WriteStatus);
}

void 
AVTransportController::_threadGetTransportInfo(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
    std::string CurrentTransportState = pAction->getArgument<std::string>("CurrentTransportState");
    std::string CurrentTransportStatus = pAction->getArgument<std::string>("CurrentTransportStatus");
    std::string CurrentSpeed = pAction->getArgument<std::string>("CurrentSpeed");
    _ansGetTransportInfo(InstanceID, CurrentTransportState, CurrentTransportStatus, CurrentSpeed);
}

void 
AVTransportController::_threadGetPositionInfo(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
    Jamm::ui4 Track = pAction->getArgument<Jamm::ui4>("Track");
    std::string TrackDuration = pAction->getArgument<std::string>("TrackDuration");
    std::string TrackMetaData = pAction->getArgument<std::string>("TrackMetaData");
    std::string TrackURI = pAction->getArgument<std::string>("TrackURI");
    std::string RelTime = pAction->getArgument<std::string>("RelTime");
    std::string AbsTime = pAction->getArgument<std::string>("AbsTime");
    Jamm::i4 RelCount = pAction->getArgument<Jamm::i4>("RelCount");
    Jamm::i4 AbsCount = pAction->getArgument<Jamm::i4>("AbsCount");
    _ansGetPositionInfo(InstanceID, Track, TrackDuration, TrackMetaData, TrackURI, RelTime, AbsTime, RelCount, AbsCount);
}

void 
AVTransportController::_threadGetDeviceCapabilities(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
    std::string PlayMedia = pAction->getArgument<std::string>("PlayMedia");
    std::string RecMedia = pAction->getArgument<std::string>("RecMedia");
    std::string RecQualityModes = pAction->getArgument<std::string>("RecQualityModes");
    _ansGetDeviceCapabilities(InstanceID, PlayMedia, RecMedia, RecQualityModes);
}

void 
AVTransportController::_threadGetTransportSettings(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
    std::string PlayMode = pAction->getArgument<std::string>("PlayMode");
    std::string RecQualityMode = pAction->getArgument<std::string>("RecQualityMode");
    _ansGetTransportSettings(InstanceID, PlayMode, RecQualityMode);
}

void 
AVTransportController::_threadStop(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
    _ansStop(InstanceID);
}

void 
AVTransportController::_threadPlay(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
    std::string Speed = pAction->getArgument<std::string>("Speed");
    _ansPlay(InstanceID, Speed);
}

void 
AVTransportController::_threadPause(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
    _ansPause(InstanceID);
}

void 
AVTransportController::_threadSeek(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
    std::string Unit = pAction->getArgument<std::string>("Unit");
    std::string Target = pAction->getArgument<std::string>("Target");
    _ansSeek(InstanceID, Unit, Target);
}

void 
AVTransportController::_threadNext(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
    _ansNext(InstanceID);
}

void 
AVTransportController::_threadPrevious(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
    _ansPrevious(InstanceID);
}



void
ConnectionManagerController::GetProtocolInfo(std::string& Source, std::string& Sink)
{
    Jamm::Action* pAction = m_pService->getAction("GetProtocolInfo")->clone();
    m_pService->sendAction(pAction);
    Source = pAction->getArgument<std::string>("Source");
    Sink = pAction->getArgument<std::string>("Sink");
}

void
ConnectionManagerController::ConnectionComplete(const Jamm::i4& ConnectionID)
{
    Jamm::Action* pAction = m_pService->getAction("ConnectionComplete")->clone();
    pAction->setArgument<Jamm::i4>("ConnectionID", ConnectionID);
    m_pService->sendAction(pAction);
}

void
ConnectionManagerController::GetCurrentConnectionIDs(std::string& ConnectionIDs)
{
    Jamm::Action* pAction = m_pService->getAction("GetCurrentConnectionIDs")->clone();
    m_pService->sendAction(pAction);
    ConnectionIDs = pAction->getArgument<std::string>("ConnectionIDs");
}

void
ConnectionManagerController::GetCurrentConnectionInfo(const Jamm::i4& ConnectionID, Jamm::i4& RcsID, Jamm::i4& AVTransportID, std::string& ProtocolInfo, std::string& PeerConnectionManager, Jamm::i4& PeerConnectionID, std::string& Direction, std::string& Status)
{
    Jamm::Action* pAction = m_pService->getAction("GetCurrentConnectionInfo")->clone();
    pAction->setArgument<Jamm::i4>("ConnectionID", ConnectionID);
    m_pService->sendAction(pAction);
    RcsID = pAction->getArgument<Jamm::i4>("RcsID");
    AVTransportID = pAction->getArgument<Jamm::i4>("AVTransportID");
    ProtocolInfo = pAction->getArgument<std::string>("ProtocolInfo");
    PeerConnectionManager = pAction->getArgument<std::string>("PeerConnectionManager");
    PeerConnectionID = pAction->getArgument<Jamm::i4>("PeerConnectionID");
    Direction = pAction->getArgument<std::string>("Direction");
    Status = pAction->getArgument<std::string>("Status");
}

std::string
ConnectionManagerController::_getSourceProtocolInfo()
{
    return m_pService->getStateVar<std::string>("SourceProtocolInfo");
}

std::string
ConnectionManagerController::_getSinkProtocolInfo()
{
    return m_pService->getStateVar<std::string>("SinkProtocolInfo");
}

std::string
ConnectionManagerController::_getCurrentConnectionIDs()
{
    return m_pService->getStateVar<std::string>("CurrentConnectionIDs");
}


void 
ConnectionManagerController::_reqGetProtocolInfo()
{
    Jamm::Action* pAction = m_pService->getAction("GetProtocolInfo")->clone();
    Jamm::ActionThread<ConnectionManagerController> thread(this, &ConnectionManagerController::_threadGetProtocolInfo, pAction);
    thread.start();
}

void 
ConnectionManagerController::_reqConnectionComplete(const Jamm::i4& ConnectionID)
{
    Jamm::Action* pAction = m_pService->getAction("ConnectionComplete")->clone();
    pAction->setArgument<Jamm::i4>("ConnectionID", ConnectionID);
    Jamm::ActionThread<ConnectionManagerController> thread(this, &ConnectionManagerController::_threadConnectionComplete, pAction);
    thread.start();
}

void 
ConnectionManagerController::_reqGetCurrentConnectionIDs()
{
    Jamm::Action* pAction = m_pService->getAction("GetCurrentConnectionIDs")->clone();
    Jamm::ActionThread<ConnectionManagerController> thread(this, &ConnectionManagerController::_threadGetCurrentConnectionIDs, pAction);
    thread.start();
}

void 
ConnectionManagerController::_reqGetCurrentConnectionInfo(const Jamm::i4& ConnectionID, )
{
    Jamm::Action* pAction = m_pService->getAction("GetCurrentConnectionInfo")->clone();
    pAction->setArgument<Jamm::i4>("ConnectionID", ConnectionID);
    Jamm::ActionThread<ConnectionManagerController> thread(this, &ConnectionManagerController::_threadGetCurrentConnectionInfo, pAction);
    thread.start();
}

void 
ConnectionManagerController::_threadGetProtocolInfo(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    std::string Source = pAction->getArgument<std::string>("Source");
    std::string Sink = pAction->getArgument<std::string>("Sink");
    _ansGetProtocolInfo(Source, Sink);
}

void 
ConnectionManagerController::_threadConnectionComplete(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    Jamm::i4 ConnectionID = pAction->getArgument<Jamm::i4>("ConnectionID");
    _ansConnectionComplete(ConnectionID);
}

void 
ConnectionManagerController::_threadGetCurrentConnectionIDs(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    std::string ConnectionIDs = pAction->getArgument<std::string>("ConnectionIDs");
    _ansGetCurrentConnectionIDs(ConnectionIDs);
}

void 
ConnectionManagerController::_threadGetCurrentConnectionInfo(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    Jamm::i4 ConnectionID = pAction->getArgument<Jamm::i4>("ConnectionID");
    Jamm::i4 RcsID = pAction->getArgument<Jamm::i4>("RcsID");
    Jamm::i4 AVTransportID = pAction->getArgument<Jamm::i4>("AVTransportID");
    std::string ProtocolInfo = pAction->getArgument<std::string>("ProtocolInfo");
    std::string PeerConnectionManager = pAction->getArgument<std::string>("PeerConnectionManager");
    Jamm::i4 PeerConnectionID = pAction->getArgument<Jamm::i4>("PeerConnectionID");
    std::string Direction = pAction->getArgument<std::string>("Direction");
    std::string Status = pAction->getArgument<std::string>("Status");
    _ansGetCurrentConnectionInfo(ConnectionID, RcsID, AVTransportID, ProtocolInfo, PeerConnectionManager, PeerConnectionID, Direction, Status);
}



void
ContentDirectoryController::GetSearchCapabilities(std::string& SearchCaps)
{
    Jamm::Action* pAction = m_pService->getAction("GetSearchCapabilities")->clone();
    m_pService->sendAction(pAction);
    SearchCaps = pAction->getArgument<std::string>("SearchCaps");
}

void
ContentDirectoryController::GetSortCapabilities(std::string& SortCaps)
{
    Jamm::Action* pAction = m_pService->getAction("GetSortCapabilities")->clone();
    m_pService->sendAction(pAction);
    SortCaps = pAction->getArgument<std::string>("SortCaps");
}

void
ContentDirectoryController::GetSystemUpdateID(Jamm::ui4& Id)
{
    Jamm::Action* pAction = m_pService->getAction("GetSystemUpdateID")->clone();
    m_pService->sendAction(pAction);
    Id = pAction->getArgument<Jamm::ui4>("Id");
}

void
ContentDirectoryController::Browse(const std::string& ObjectID, const std::string& BrowseFlag, const std::string& Filter, const Jamm::ui4& StartingIndex, const Jamm::ui4& RequestedCount, const std::string& SortCriteria, std::string& Result, Jamm::ui4& NumberReturned, Jamm::ui4& TotalMatches, Jamm::ui4& UpdateID)
{
    Jamm::Action* pAction = m_pService->getAction("Browse")->clone();
    pAction->setArgument<std::string>("ObjectID", ObjectID);
    pAction->setArgument<std::string>("BrowseFlag", BrowseFlag);
    pAction->setArgument<std::string>("Filter", Filter);
    pAction->setArgument<Jamm::ui4>("StartingIndex", StartingIndex);
    pAction->setArgument<Jamm::ui4>("RequestedCount", RequestedCount);
    pAction->setArgument<std::string>("SortCriteria", SortCriteria);
    m_pService->sendAction(pAction);
    Result = pAction->getArgument<std::string>("Result");
    NumberReturned = pAction->getArgument<Jamm::ui4>("NumberReturned");
    TotalMatches = pAction->getArgument<Jamm::ui4>("TotalMatches");
    UpdateID = pAction->getArgument<Jamm::ui4>("UpdateID");
}

void
ContentDirectoryController::Search(const std::string& ContainerID, const std::string& SearchCriteria, const std::string& Filter, const Jamm::ui4& StartingIndex, const Jamm::ui4& RequestedCount, const std::string& SortCriteria, std::string& Result, Jamm::ui4& NumberReturned, Jamm::ui4& TotalMatches, Jamm::ui4& UpdateID)
{
    Jamm::Action* pAction = m_pService->getAction("Search")->clone();
    pAction->setArgument<std::string>("ContainerID", ContainerID);
    pAction->setArgument<std::string>("SearchCriteria", SearchCriteria);
    pAction->setArgument<std::string>("Filter", Filter);
    pAction->setArgument<Jamm::ui4>("StartingIndex", StartingIndex);
    pAction->setArgument<Jamm::ui4>("RequestedCount", RequestedCount);
    pAction->setArgument<std::string>("SortCriteria", SortCriteria);
    m_pService->sendAction(pAction);
    Result = pAction->getArgument<std::string>("Result");
    NumberReturned = pAction->getArgument<Jamm::ui4>("NumberReturned");
    TotalMatches = pAction->getArgument<Jamm::ui4>("TotalMatches");
    UpdateID = pAction->getArgument<Jamm::ui4>("UpdateID");
}

void
ContentDirectoryController::CreateObject(const std::string& ContainerID, const std::string& Elements, std::string& ObjectID, std::string& Result)
{
    Jamm::Action* pAction = m_pService->getAction("CreateObject")->clone();
    pAction->setArgument<std::string>("ContainerID", ContainerID);
    pAction->setArgument<std::string>("Elements", Elements);
    m_pService->sendAction(pAction);
    ObjectID = pAction->getArgument<std::string>("ObjectID");
    Result = pAction->getArgument<std::string>("Result");
}

void
ContentDirectoryController::DestroyObject(const std::string& ObjectID)
{
    Jamm::Action* pAction = m_pService->getAction("DestroyObject")->clone();
    pAction->setArgument<std::string>("ObjectID", ObjectID);
    m_pService->sendAction(pAction);
}

void
ContentDirectoryController::UpdateObject(const std::string& ObjectID, const std::string& CurrentTagValue, const std::string& NewTagValue)
{
    Jamm::Action* pAction = m_pService->getAction("UpdateObject")->clone();
    pAction->setArgument<std::string>("ObjectID", ObjectID);
    pAction->setArgument<std::string>("CurrentTagValue", CurrentTagValue);
    pAction->setArgument<std::string>("NewTagValue", NewTagValue);
    m_pService->sendAction(pAction);
}

void
ContentDirectoryController::ImportResource(const & SourceURI, const & DestinationURI, Jamm::ui4& TransferID)
{
    Jamm::Action* pAction = m_pService->getAction("ImportResource")->clone();
    pAction->setArgument<>("SourceURI", SourceURI);
    pAction->setArgument<>("DestinationURI", DestinationURI);
    m_pService->sendAction(pAction);
    TransferID = pAction->getArgument<Jamm::ui4>("TransferID");
}

void
ContentDirectoryController::GetTransferProgress(const Jamm::ui4& TransferID, std::string& TransferStatus, std::string& TransferLength, std::string& TransferTotal)
{
    Jamm::Action* pAction = m_pService->getAction("GetTransferProgress")->clone();
    pAction->setArgument<Jamm::ui4>("TransferID", TransferID);
    m_pService->sendAction(pAction);
    TransferStatus = pAction->getArgument<std::string>("TransferStatus");
    TransferLength = pAction->getArgument<std::string>("TransferLength");
    TransferTotal = pAction->getArgument<std::string>("TransferTotal");
}

void
ContentDirectoryController::DeleteResource(const & ResourceURI)
{
    Jamm::Action* pAction = m_pService->getAction("DeleteResource")->clone();
    pAction->setArgument<>("ResourceURI", ResourceURI);
    m_pService->sendAction(pAction);
}

void
ContentDirectoryController::CreateReference(const std::string& ContainerID, const std::string& ObjectID, std::string& NewID)
{
    Jamm::Action* pAction = m_pService->getAction("CreateReference")->clone();
    pAction->setArgument<std::string>("ContainerID", ContainerID);
    pAction->setArgument<std::string>("ObjectID", ObjectID);
    m_pService->sendAction(pAction);
    NewID = pAction->getArgument<std::string>("NewID");
}

std::string
ContentDirectoryController::_getTransferIDs()
{
    return m_pService->getStateVar<std::string>("TransferIDs");
}

Jamm::ui4
ContentDirectoryController::_getSystemUpdateID()
{
    return m_pService->getStateVar<Jamm::ui4>("SystemUpdateID");
}

std::string
ContentDirectoryController::_getContainerUpdateIDs()
{
    return m_pService->getStateVar<std::string>("ContainerUpdateIDs");
}


void 
ContentDirectoryController::_reqGetSearchCapabilities()
{
    Jamm::Action* pAction = m_pService->getAction("GetSearchCapabilities")->clone();
    Jamm::ActionThread<ContentDirectoryController> thread(this, &ContentDirectoryController::_threadGetSearchCapabilities, pAction);
    thread.start();
}

void 
ContentDirectoryController::_reqGetSortCapabilities()
{
    Jamm::Action* pAction = m_pService->getAction("GetSortCapabilities")->clone();
    Jamm::ActionThread<ContentDirectoryController> thread(this, &ContentDirectoryController::_threadGetSortCapabilities, pAction);
    thread.start();
}

void 
ContentDirectoryController::_reqGetSystemUpdateID()
{
    Jamm::Action* pAction = m_pService->getAction("GetSystemUpdateID")->clone();
    Jamm::ActionThread<ContentDirectoryController> thread(this, &ContentDirectoryController::_threadGetSystemUpdateID, pAction);
    thread.start();
}

void 
ContentDirectoryController::_reqBrowse(const std::string& ObjectID, const std::string& BrowseFlag, const std::string& Filter, const Jamm::ui4& StartingIndex, const Jamm::ui4& RequestedCount, const std::string& SortCriteria, )
{
    Jamm::Action* pAction = m_pService->getAction("Browse")->clone();
    pAction->setArgument<std::string>("ObjectID", ObjectID);
    pAction->setArgument<std::string>("BrowseFlag", BrowseFlag);
    pAction->setArgument<std::string>("Filter", Filter);
    pAction->setArgument<Jamm::ui4>("StartingIndex", StartingIndex);
    pAction->setArgument<Jamm::ui4>("RequestedCount", RequestedCount);
    pAction->setArgument<std::string>("SortCriteria", SortCriteria);
    Jamm::ActionThread<ContentDirectoryController> thread(this, &ContentDirectoryController::_threadBrowse, pAction);
    thread.start();
}

void 
ContentDirectoryController::_reqSearch(const std::string& ContainerID, const std::string& SearchCriteria, const std::string& Filter, const Jamm::ui4& StartingIndex, const Jamm::ui4& RequestedCount, const std::string& SortCriteria, )
{
    Jamm::Action* pAction = m_pService->getAction("Search")->clone();
    pAction->setArgument<std::string>("ContainerID", ContainerID);
    pAction->setArgument<std::string>("SearchCriteria", SearchCriteria);
    pAction->setArgument<std::string>("Filter", Filter);
    pAction->setArgument<Jamm::ui4>("StartingIndex", StartingIndex);
    pAction->setArgument<Jamm::ui4>("RequestedCount", RequestedCount);
    pAction->setArgument<std::string>("SortCriteria", SortCriteria);
    Jamm::ActionThread<ContentDirectoryController> thread(this, &ContentDirectoryController::_threadSearch, pAction);
    thread.start();
}

void 
ContentDirectoryController::_reqCreateObject(const std::string& ContainerID, const std::string& Elements, )
{
    Jamm::Action* pAction = m_pService->getAction("CreateObject")->clone();
    pAction->setArgument<std::string>("ContainerID", ContainerID);
    pAction->setArgument<std::string>("Elements", Elements);
    Jamm::ActionThread<ContentDirectoryController> thread(this, &ContentDirectoryController::_threadCreateObject, pAction);
    thread.start();
}

void 
ContentDirectoryController::_reqDestroyObject(const std::string& ObjectID)
{
    Jamm::Action* pAction = m_pService->getAction("DestroyObject")->clone();
    pAction->setArgument<std::string>("ObjectID", ObjectID);
    Jamm::ActionThread<ContentDirectoryController> thread(this, &ContentDirectoryController::_threadDestroyObject, pAction);
    thread.start();
}

void 
ContentDirectoryController::_reqUpdateObject(const std::string& ObjectID, const std::string& CurrentTagValue, const std::string& NewTagValue)
{
    Jamm::Action* pAction = m_pService->getAction("UpdateObject")->clone();
    pAction->setArgument<std::string>("ObjectID", ObjectID);
    pAction->setArgument<std::string>("CurrentTagValue", CurrentTagValue);
    pAction->setArgument<std::string>("NewTagValue", NewTagValue);
    Jamm::ActionThread<ContentDirectoryController> thread(this, &ContentDirectoryController::_threadUpdateObject, pAction);
    thread.start();
}

void 
ContentDirectoryController::_reqImportResource(const & SourceURI, const & DestinationURI, )
{
    Jamm::Action* pAction = m_pService->getAction("ImportResource")->clone();
    pAction->setArgument<>("SourceURI", SourceURI);
    pAction->setArgument<>("DestinationURI", DestinationURI);
    Jamm::ActionThread<ContentDirectoryController> thread(this, &ContentDirectoryController::_threadImportResource, pAction);
    thread.start();
}

void 
ContentDirectoryController::_reqGetTransferProgress(const Jamm::ui4& TransferID, )
{
    Jamm::Action* pAction = m_pService->getAction("GetTransferProgress")->clone();
    pAction->setArgument<Jamm::ui4>("TransferID", TransferID);
    Jamm::ActionThread<ContentDirectoryController> thread(this, &ContentDirectoryController::_threadGetTransferProgress, pAction);
    thread.start();
}

void 
ContentDirectoryController::_reqDeleteResource(const & ResourceURI)
{
    Jamm::Action* pAction = m_pService->getAction("DeleteResource")->clone();
    pAction->setArgument<>("ResourceURI", ResourceURI);
    Jamm::ActionThread<ContentDirectoryController> thread(this, &ContentDirectoryController::_threadDeleteResource, pAction);
    thread.start();
}

void 
ContentDirectoryController::_reqCreateReference(const std::string& ContainerID, const std::string& ObjectID, )
{
    Jamm::Action* pAction = m_pService->getAction("CreateReference")->clone();
    pAction->setArgument<std::string>("ContainerID", ContainerID);
    pAction->setArgument<std::string>("ObjectID", ObjectID);
    Jamm::ActionThread<ContentDirectoryController> thread(this, &ContentDirectoryController::_threadCreateReference, pAction);
    thread.start();
}

void 
ContentDirectoryController::_threadGetSearchCapabilities(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    std::string SearchCaps = pAction->getArgument<std::string>("SearchCaps");
    _ansGetSearchCapabilities(SearchCaps);
}

void 
ContentDirectoryController::_threadGetSortCapabilities(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    std::string SortCaps = pAction->getArgument<std::string>("SortCaps");
    _ansGetSortCapabilities(SortCaps);
}

void 
ContentDirectoryController::_threadGetSystemUpdateID(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    Jamm::ui4 Id = pAction->getArgument<Jamm::ui4>("Id");
    _ansGetSystemUpdateID(Id);
}

void 
ContentDirectoryController::_threadBrowse(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    std::string ObjectID = pAction->getArgument<std::string>("ObjectID");
    std::string BrowseFlag = pAction->getArgument<std::string>("BrowseFlag");
    std::string Filter = pAction->getArgument<std::string>("Filter");
    Jamm::ui4 StartingIndex = pAction->getArgument<Jamm::ui4>("StartingIndex");
    Jamm::ui4 RequestedCount = pAction->getArgument<Jamm::ui4>("RequestedCount");
    std::string SortCriteria = pAction->getArgument<std::string>("SortCriteria");
    std::string Result = pAction->getArgument<std::string>("Result");
    Jamm::ui4 NumberReturned = pAction->getArgument<Jamm::ui4>("NumberReturned");
    Jamm::ui4 TotalMatches = pAction->getArgument<Jamm::ui4>("TotalMatches");
    Jamm::ui4 UpdateID = pAction->getArgument<Jamm::ui4>("UpdateID");
    _ansBrowse(ObjectID, BrowseFlag, Filter, StartingIndex, RequestedCount, SortCriteria, Result, NumberReturned, TotalMatches, UpdateID);
}

void 
ContentDirectoryController::_threadSearch(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    std::string ContainerID = pAction->getArgument<std::string>("ContainerID");
    std::string SearchCriteria = pAction->getArgument<std::string>("SearchCriteria");
    std::string Filter = pAction->getArgument<std::string>("Filter");
    Jamm::ui4 StartingIndex = pAction->getArgument<Jamm::ui4>("StartingIndex");
    Jamm::ui4 RequestedCount = pAction->getArgument<Jamm::ui4>("RequestedCount");
    std::string SortCriteria = pAction->getArgument<std::string>("SortCriteria");
    std::string Result = pAction->getArgument<std::string>("Result");
    Jamm::ui4 NumberReturned = pAction->getArgument<Jamm::ui4>("NumberReturned");
    Jamm::ui4 TotalMatches = pAction->getArgument<Jamm::ui4>("TotalMatches");
    Jamm::ui4 UpdateID = pAction->getArgument<Jamm::ui4>("UpdateID");
    _ansSearch(ContainerID, SearchCriteria, Filter, StartingIndex, RequestedCount, SortCriteria, Result, NumberReturned, TotalMatches, UpdateID);
}

void 
ContentDirectoryController::_threadCreateObject(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    std::string ContainerID = pAction->getArgument<std::string>("ContainerID");
    std::string Elements = pAction->getArgument<std::string>("Elements");
    std::string ObjectID = pAction->getArgument<std::string>("ObjectID");
    std::string Result = pAction->getArgument<std::string>("Result");
    _ansCreateObject(ContainerID, Elements, ObjectID, Result);
}

void 
ContentDirectoryController::_threadDestroyObject(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    std::string ObjectID = pAction->getArgument<std::string>("ObjectID");
    _ansDestroyObject(ObjectID);
}

void 
ContentDirectoryController::_threadUpdateObject(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    std::string ObjectID = pAction->getArgument<std::string>("ObjectID");
    std::string CurrentTagValue = pAction->getArgument<std::string>("CurrentTagValue");
    std::string NewTagValue = pAction->getArgument<std::string>("NewTagValue");
    _ansUpdateObject(ObjectID, CurrentTagValue, NewTagValue);
}

void 
ContentDirectoryController::_threadImportResource(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
     SourceURI = pAction->getArgument<>("SourceURI");
     DestinationURI = pAction->getArgument<>("DestinationURI");
    Jamm::ui4 TransferID = pAction->getArgument<Jamm::ui4>("TransferID");
    _ansImportResource(SourceURI, DestinationURI, TransferID);
}

void 
ContentDirectoryController::_threadGetTransferProgress(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    Jamm::ui4 TransferID = pAction->getArgument<Jamm::ui4>("TransferID");
    std::string TransferStatus = pAction->getArgument<std::string>("TransferStatus");
    std::string TransferLength = pAction->getArgument<std::string>("TransferLength");
    std::string TransferTotal = pAction->getArgument<std::string>("TransferTotal");
    _ansGetTransferProgress(TransferID, TransferStatus, TransferLength, TransferTotal);
}

void 
ContentDirectoryController::_threadDeleteResource(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
     ResourceURI = pAction->getArgument<>("ResourceURI");
    _ansDeleteResource(ResourceURI);
}

void 
ContentDirectoryController::_threadCreateReference(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    std::string ContainerID = pAction->getArgument<std::string>("ContainerID");
    std::string ObjectID = pAction->getArgument<std::string>("ObjectID");
    std::string NewID = pAction->getArgument<std::string>("NewID");
    _ansCreateReference(ContainerID, ObjectID, NewID);
}



void
MediaServerController::eventHandler(Jamm::StateVar* pStateVar)
{
    if (pStateVar->getName() == "LastChange") {
        std::string val;
        pStateVar->getValue(val);
        m_pAVTransportController->_changedLastChange(val);
    }
    else if (pStateVar->getName() == "SourceProtocolInfo") {
        std::string val;
        pStateVar->getValue(val);
        m_pConnectionManagerController->_changedSourceProtocolInfo(val);
    }
    else if (pStateVar->getName() == "SinkProtocolInfo") {
        std::string val;
        pStateVar->getValue(val);
        m_pConnectionManagerController->_changedSinkProtocolInfo(val);
    }
    else if (pStateVar->getName() == "CurrentConnectionIDs") {
        std::string val;
        pStateVar->getValue(val);
        m_pConnectionManagerController->_changedCurrentConnectionIDs(val);
    }
    else if (pStateVar->getName() == "TransferIDs") {
        std::string val;
        pStateVar->getValue(val);
        m_pContentDirectoryController->_changedTransferIDs(val);
    }
    else if (pStateVar->getName() == "SystemUpdateID") {
        Jamm::ui4 val;
        pStateVar->getValue(val);
        m_pContentDirectoryController->_changedSystemUpdateID(val);
    }
    else if (pStateVar->getName() == "ContainerUpdateIDs") {
        std::string val;
        pStateVar->getValue(val);
        m_pContentDirectoryController->_changedContainerUpdateIDs(val);
    }
}


MediaServerController::MediaServerController(Jamm::Device* pDevice, ContentDirectoryController* pContentDirectoryController, ConnectionManagerController* pConnectionManagerController, AVTransportController* pAVTransportController) :
ControllerImplAdapter(pDevice),
m_pDevice(pDevice),
m_pContentDirectoryController(pContentDirectoryController), 
m_pConnectionManagerController(pConnectionManagerController), 
m_pAVTransportController(pAVTransportController)
{
    m_pContentDirectoryController->m_pService = m_pDevice->getService("urn:schemas-upnp-org:service:ContentDirectory:1");
    m_pConnectionManagerController->m_pService = m_pDevice->getService("urn:schemas-upnp-org:service:ConnectionManager:1");
    m_pAVTransportController->m_pService = m_pDevice->getService("urn:schemas-upnp-org:service:AVTransport:1");

    init();
}

