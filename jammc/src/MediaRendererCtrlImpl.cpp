/***************************************************************************|
|                               WARNING                                     |
|        This file is generated by the jamm stub generator jammgen.         |
|                   RENAME THIS FILE BEFORE EDITING!                        |
|           It will be overriden at the next run of jammgen.                |
***************************************************************************/

#include "MediaRendererCtrlImpl.h"

void
AVTransportControllerImpl::_ansSetAVTransportURI(const Jamm::ui4& InstanceID, const std::string& CurrentURI, const std::string& CurrentURIMetaData)
{
// begin of your own code

// end of your own code
}


void
AVTransportControllerImpl::_ansGetMediaInfo(/*const Jamm::ui4& InstanceID, const Jamm::ui4& NrTracks, const std::string& MediaDuration, const std::string& CurrentURI, const std::string& CurrentURIMetaData, const std::string& NextURI, const std::string& NextURIMetaData, const std::string& PlayMedium, const std::string& RecordMedium, const std::string& WriteStatus*/)
{
// begin of your own code

// end of your own code
}


void
AVTransportControllerImpl::_ansGetTransportInfo(const Jamm::ui4& InstanceID, const std::string& CurrentTransportState, const std::string& CurrentTransportStatus, const std::string& CurrentSpeed)
{
// begin of your own code

// end of your own code
}


void
AVTransportControllerImpl::_ansGetPositionInfo(const Jamm::ui4& InstanceID, const Jamm::ui4& Track, const std::string& TrackDuration, const std::string& TrackMetaData, const std::string& TrackURI, const std::string& RelTime, const std::string& AbsTime, const Jamm::i4& RelCount, const Jamm::i4& AbsCount)
{
// begin of your own code

// end of your own code
}


void
AVTransportControllerImpl::_ansGetDeviceCapabilities(const Jamm::ui4& InstanceID, const std::string& PlayMedia, const std::string& RecMedia, const std::string& RecQualityModes)
{
// begin of your own code

// end of your own code
}


void
AVTransportControllerImpl::_ansGetTransportSettings(const Jamm::ui4& InstanceID, const std::string& PlayMode, const std::string& RecQualityMode)
{
// begin of your own code

// end of your own code
}


void
AVTransportControllerImpl::_ansStop(const Jamm::ui4& InstanceID)
{
// begin of your own code

// end of your own code
}


void
AVTransportControllerImpl::_ansPlay(const Jamm::ui4& InstanceID, const std::string& Speed)
{
// begin of your own code

// end of your own code
}


void
AVTransportControllerImpl::_ansPause(const Jamm::ui4& InstanceID)
{
// begin of your own code

// end of your own code
}


void
AVTransportControllerImpl::_ansSeek(const Jamm::ui4& InstanceID, const std::string& Unit, const std::string& Target)
{
// begin of your own code

// end of your own code
}


void
AVTransportControllerImpl::_ansNext(const Jamm::ui4& InstanceID)
{
// begin of your own code

// end of your own code
}


void
AVTransportControllerImpl::_ansPrevious(const Jamm::ui4& InstanceID)
{
// begin of your own code

// end of your own code
}


void
AVTransportControllerImpl::_changedLastChange(const std::string& val)
{
// begin of your own code

// end of your own code
}


void
ConnectionManagerControllerImpl::_ansGetProtocolInfo(const std::string& Source, const std::string& Sink)
{
// begin of your own code

// end of your own code
}


void
ConnectionManagerControllerImpl::_ansGetCurrentConnectionIDs(const std::string& ConnectionIDs)
{
// begin of your own code

// end of your own code
}


void
ConnectionManagerControllerImpl::_ansGetCurrentConnectionInfo(const Jamm::i4& ConnectionID, const Jamm::i4& RcsID, const Jamm::i4& AVTransportID, const std::string& ProtocolInfo, const std::string& PeerConnectionManager, const Jamm::i4& PeerConnectionID, const std::string& Direction, const std::string& Status)
{
// begin of your own code

// end of your own code
}


void
ConnectionManagerControllerImpl::_changedSourceProtocolInfo(const std::string& val)
{
// begin of your own code

// end of your own code
}


void
ConnectionManagerControllerImpl::_changedSinkProtocolInfo(const std::string& val)
{
// begin of your own code

// end of your own code
}


void
ConnectionManagerControllerImpl::_changedCurrentConnectionIDs(const std::string& val)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansListPresets(const Jamm::ui4& InstanceID, const std::string& CurrentPresetNameList)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansSelectPreset(const Jamm::ui4& InstanceID, const std::string& PresetName)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansGetBrightness(const Jamm::ui4& InstanceID, const Jamm::ui2& CurrentBrightness)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansSetBrightness(const Jamm::ui4& InstanceID, const Jamm::ui2& DesiredBrightness)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansGetContrast(const Jamm::ui4& InstanceID, const Jamm::ui2& CurrentContrast)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansSetContrast(const Jamm::ui4& InstanceID, const Jamm::ui2& DesiredContrast)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansGetSharpness(const Jamm::ui4& InstanceID, const Jamm::ui2& CurrentSharpness)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansSetSharpness(const Jamm::ui4& InstanceID, const Jamm::ui2& DesiredSharpness)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansGetRedVideoGain(const Jamm::ui4& InstanceID, const Jamm::ui2& CurrentRedVideoGain)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansSetRedVideoGain(const Jamm::ui4& InstanceID, const Jamm::ui2& DesiredRedVideoGain)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansGetGreenVideoGain(const Jamm::ui4& InstanceID, const Jamm::ui2& CurrentGreenVideoGain)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansSetGreenVideoGain(const Jamm::ui4& InstanceID, const Jamm::ui2& DesiredGreenVideoGain)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansGetBlueVideoGain(const Jamm::ui4& InstanceID, const Jamm::ui2& CurrentBlueVideoGain)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansSetBlueVideoGain(const Jamm::ui4& InstanceID, const Jamm::ui2& DesiredBlueVideoGain)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansGetRedVideoBlackLevel(const Jamm::ui4& InstanceID, const Jamm::ui2& CurrentRedVideoBlackLevel)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansSetRedVideoBlackLevel(const Jamm::ui4& InstanceID, const Jamm::ui2& DesiredRedVideoBlackLevel)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansGetGreenVideoBlackLevel(const Jamm::ui4& InstanceID, const Jamm::ui2& CurrentGreenVideoBlackLevel)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansSetGreenVideoBlackLevel(const Jamm::ui4& InstanceID, const Jamm::ui2& DesiredGreenVideoBlackLevel)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansGetBlueVideoBlackLevel(const Jamm::ui4& InstanceID, const Jamm::ui2& CurrentBlueVideoBlackLevel)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansSetBlueVideoBlackLevel(const Jamm::ui4& InstanceID, const Jamm::ui2& DesiredBlueVideoBlackLevel)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansGetColorTemperature (const Jamm::ui4& InstanceID, const Jamm::ui2& CurrentColorTemperature)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansSetColorTemperature(const Jamm::ui4& InstanceID, const Jamm::ui2& DesiredColorTemperature)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansGetHorizontalKeystone(const Jamm::ui4& InstanceID, const Jamm::i2& CurrentHorizontalKeystone)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansSetHorizontalKeystone(const Jamm::ui4& InstanceID, const Jamm::i2& DesiredHorizontalKeystone)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansGetVerticalKeystone(const Jamm::ui4& InstanceID, const Jamm::i2& CurrentVerticalKeystone)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansSetVerticalKeystone(const Jamm::ui4& InstanceID, const Jamm::i2& DesiredVerticalKeystone)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansGetMute(const Jamm::ui4& InstanceID, const std::string& Channel, const bool& CurrentMute)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansSetMute(const Jamm::ui4& InstanceID, const std::string& Channel, const bool& DesiredMute)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansGetVolume(const Jamm::ui4& InstanceID, const std::string& Channel, const Jamm::ui2& CurrentVolume)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansSetVolume(const Jamm::ui4& InstanceID, const std::string& Channel, const Jamm::ui2& DesiredVolume)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansGetVolumeDB(const Jamm::ui4& InstanceID, const std::string& Channel, const Jamm::i2& CurrentVolume)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansSetVolumeDB(const Jamm::ui4& InstanceID, const std::string& Channel, const Jamm::i2& DesiredVolume)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansGetVolumeDBRange(const Jamm::ui4& InstanceID, const std::string& Channel, const Jamm::i2& MinValue, const Jamm::i2& MaxValue)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansGetLoudness(const Jamm::ui4& InstanceID, const std::string& Channel, const bool& CurrentLoudness)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_ansSetLoudness(const Jamm::ui4& InstanceID, const std::string& Channel, const bool& DesiredLoudness)
{
// begin of your own code

// end of your own code
}


void
RenderingControlControllerImpl::_changedLastChange(const std::string& val)
{
// begin of your own code

// end of your own code
}


