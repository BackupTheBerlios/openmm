/***************************************************************************|
|                               WARNING                                     |
|        This file is generated by the jamm stub generator jammgen.         |
|                   RENAME THIS FILE BEFORE EDITING!                        |
|           It will be overriden at the next run of jammgen.                |
***************************************************************************/

#ifndef MEDIASERVER_CTRL_IMPL_H
#define MEDIASERVER_CTRL_IMPL_H

#include <jamm/upnp.h>
#include "MediaServerCtrl.h"

class AVTransportControllerImpl : public AVTransportController
{
private:
    virtual void _ansSetAVTransportURI(const Jamm::ui4& InstanceID, const std::string& CurrentURI, const std::string& CurrentURIMetaData);
    virtual void _ansGetMediaInfo(const Jamm::ui4& InstanceID, const Jamm::ui4& NrTracks, const std::string& MediaDuration, const std::string& CurrentURI, const std::string& CurrentURIMetaData, const std::string& NextURI, const std::string& NextURIMetaData, const std::string& PlayMedium, const std::string& RecordMedium, const std::string& WriteStatus);
    virtual void _ansGetTransportInfo(const Jamm::ui4& InstanceID, const std::string& CurrentTransportState, const std::string& CurrentTransportStatus, const std::string& CurrentSpeed);
    virtual void _ansGetPositionInfo(const Jamm::ui4& InstanceID, const Jamm::ui4& Track, const std::string& TrackDuration, const std::string& TrackMetaData, const std::string& TrackURI, const std::string& RelTime, const std::string& AbsTime, const Jamm::i4& RelCount, const Jamm::i4& AbsCount);
    virtual void _ansGetDeviceCapabilities(const Jamm::ui4& InstanceID, const std::string& PlayMedia, const std::string& RecMedia, const std::string& RecQualityModes);
    virtual void _ansGetTransportSettings(const Jamm::ui4& InstanceID, const std::string& PlayMode, const std::string& RecQualityMode);
    virtual void _ansStop(const Jamm::ui4& InstanceID);
    virtual void _ansPlay(const Jamm::ui4& InstanceID, const std::string& Speed);
    virtual void _ansPause(const Jamm::ui4& InstanceID);
    virtual void _ansSeek(const Jamm::ui4& InstanceID, const std::string& Unit, const std::string& Target);
    virtual void _ansNext(const Jamm::ui4& InstanceID);
    virtual void _ansPrevious(const Jamm::ui4& InstanceID);

    virtual void _changedLastChange(const std::string& val);
};

class ConnectionManagerControllerImpl : public ConnectionManagerController
{
private:
    virtual void _ansGetProtocolInfo(const std::string& Source, const std::string& Sink);
    virtual void _ansConnectionComplete(const Jamm::i4& ConnectionID);
    virtual void _ansGetCurrentConnectionIDs(const std::string& ConnectionIDs);
    virtual void _ansGetCurrentConnectionInfo(const Jamm::i4& ConnectionID, const Jamm::i4& RcsID, const Jamm::i4& AVTransportID, const std::string& ProtocolInfo, const std::string& PeerConnectionManager, const Jamm::i4& PeerConnectionID, const std::string& Direction, const std::string& Status);

    virtual void _changedSourceProtocolInfo(const std::string& val);
    virtual void _changedSinkProtocolInfo(const std::string& val);
    virtual void _changedCurrentConnectionIDs(const std::string& val);
};

class ContentDirectoryControllerImpl : public ContentDirectoryController
{
private:
    virtual void _ansGetSearchCapabilities(const std::string& SearchCaps);
    virtual void _ansGetSortCapabilities(const std::string& SortCaps);
    virtual void _ansGetSystemUpdateID(const Jamm::ui4& Id);
    virtual void _ansBrowse(const std::string& ObjectID, const std::string& BrowseFlag, const std::string& Filter, const Jamm::ui4& StartingIndex, const Jamm::ui4& RequestedCount, const std::string& SortCriteria, const std::string& Result, const Jamm::ui4& NumberReturned, const Jamm::ui4& TotalMatches, const Jamm::ui4& UpdateID);
    virtual void _ansSearch(const std::string& ContainerID, const std::string& SearchCriteria, const std::string& Filter, const Jamm::ui4& StartingIndex, const Jamm::ui4& RequestedCount, const std::string& SortCriteria, const std::string& Result, const Jamm::ui4& NumberReturned, const Jamm::ui4& TotalMatches, const Jamm::ui4& UpdateID);
    virtual void _ansCreateObject(const std::string& ContainerID, const std::string& Elements, const std::string& ObjectID, const std::string& Result);
    virtual void _ansDestroyObject(const std::string& ObjectID);
    virtual void _ansUpdateObject(const std::string& ObjectID, const std::string& CurrentTagValue, const std::string& NewTagValue);
    virtual void _ansImportResource(const & SourceURI, const & DestinationURI, const Jamm::ui4& TransferID);
    virtual void _ansGetTransferProgress(const Jamm::ui4& TransferID, const std::string& TransferStatus, const std::string& TransferLength, const std::string& TransferTotal);
    virtual void _ansDeleteResource(const & ResourceURI);
    virtual void _ansCreateReference(const std::string& ContainerID, const std::string& ObjectID, const std::string& NewID);

    virtual void _changedTransferIDs(const std::string& val);
    virtual void _changedSystemUpdateID(const Jamm::ui4& val);
    virtual void _changedContainerUpdateIDs(const std::string& val);
};

#endif

