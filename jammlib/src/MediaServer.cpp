/***************************************************************************|
|  Jamm - Just another multimedia ...                                       |
|         ... set of applications and libraries based on the UPnP-AV specs  |
|                                                                           |
|  Copyright (C) 2009                                                       |
|  JÃ¶rg Bakker (joerg'at'hakker'dot'de)                                     |
|                                                                           |
|  This file is part of Jamm.                                               |
|                                                                           |
|  Jamm is free software: you can redistribute it and/or modify             |
|  it under the terms of the GNU General Public License as published by     |
|  the Free Software Foundation version 3 of the License.                   |
|                                                                           |
|  Jamm is distributed in the hope that it will be useful,                  |
|  but WITHOUT ANY WARRANTY; without even the implied warranty of           |
|  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
|  GNU General Public License for more details.                             |
|                                                                           |
|  You should have received a copy of the GNU General Public License        |
|  along with this program.  If not, see <http://www.gnu.org/licenses/>.    |
***************************************************************************/

/***************************************************************************|
|                               WARNING                                     |
|        This file is generated by the jamm stub generator jammgen.         |
|       Don't edit, it will be overriden at the next run of jammgen.        |
***************************************************************************/

#include "MediaServer.h"
#include "MediaServerDescriptions.h"


void
MediaServer::actionHandler(Action* pAction)
{
    // the great action dispatcher
    if (pAction->getService()->getServiceType() == "urn:schemas-upnp-org:service:AVTransport:1") {
        m_pAVTransportImpl->m_pService = pAction->getService();
        std::string actionName = pAction->getName();

        if (actionName == "SetAVTransportURI") {
            Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
            std::string CurrentURI = pAction->getArgument<std::string>("CurrentURI");
            std::string CurrentURIMetaData = pAction->getArgument<std::string>("CurrentURIMetaData");
            m_pAVTransportImpl->SetAVTransportURI(InstanceID, CurrentURI, CurrentURIMetaData);
        }
        else if (actionName == "GetMediaInfo") {
            Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
            Jamm::ui4 NrTracks;
            std::string MediaDuration;
            std::string CurrentURI;
            std::string CurrentURIMetaData;
            std::string NextURI;
            std::string NextURIMetaData;
            std::string PlayMedium;
            std::string RecordMedium;
            std::string WriteStatus;
            m_pAVTransportImpl->GetMediaInfo(InstanceID, NrTracks, MediaDuration, CurrentURI, CurrentURIMetaData, NextURI, NextURIMetaData, PlayMedium, RecordMedium, WriteStatus);
            pAction->setArgument<Jamm::ui4>("NrTracks", NrTracks);
            pAction->setArgument<std::string>("MediaDuration", MediaDuration);
            pAction->setArgument<std::string>("CurrentURI", CurrentURI);
            pAction->setArgument<std::string>("CurrentURIMetaData", CurrentURIMetaData);
            pAction->setArgument<std::string>("NextURI", NextURI);
            pAction->setArgument<std::string>("NextURIMetaData", NextURIMetaData);
            pAction->setArgument<std::string>("PlayMedium", PlayMedium);
            pAction->setArgument<std::string>("RecordMedium", RecordMedium);
            pAction->setArgument<std::string>("WriteStatus", WriteStatus);
        }
        else if (actionName == "GetTransportInfo") {
            Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
            std::string CurrentTransportState;
            std::string CurrentTransportStatus;
            std::string CurrentSpeed;
            m_pAVTransportImpl->GetTransportInfo(InstanceID, CurrentTransportState, CurrentTransportStatus, CurrentSpeed);
            pAction->setArgument<std::string>("CurrentTransportState", CurrentTransportState);
            pAction->setArgument<std::string>("CurrentTransportStatus", CurrentTransportStatus);
            pAction->setArgument<std::string>("CurrentSpeed", CurrentSpeed);
        }
        else if (actionName == "GetPositionInfo") {
            Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
            Jamm::ui4 Track;
            std::string TrackDuration;
            std::string TrackMetaData;
            std::string TrackURI;
            std::string RelTime;
            std::string AbsTime;
            Jamm::i4 RelCount;
            Jamm::i4 AbsCount;
            m_pAVTransportImpl->GetPositionInfo(InstanceID, Track, TrackDuration, TrackMetaData, TrackURI, RelTime, AbsTime, RelCount, AbsCount);
            pAction->setArgument<Jamm::ui4>("Track", Track);
            pAction->setArgument<std::string>("TrackDuration", TrackDuration);
            pAction->setArgument<std::string>("TrackMetaData", TrackMetaData);
            pAction->setArgument<std::string>("TrackURI", TrackURI);
            pAction->setArgument<std::string>("RelTime", RelTime);
            pAction->setArgument<std::string>("AbsTime", AbsTime);
            pAction->setArgument<Jamm::i4>("RelCount", RelCount);
            pAction->setArgument<Jamm::i4>("AbsCount", AbsCount);
        }
        else if (actionName == "GetDeviceCapabilities") {
            Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
            std::string PlayMedia;
            std::string RecMedia;
            std::string RecQualityModes;
            m_pAVTransportImpl->GetDeviceCapabilities(InstanceID, PlayMedia, RecMedia, RecQualityModes);
            pAction->setArgument<std::string>("PlayMedia", PlayMedia);
            pAction->setArgument<std::string>("RecMedia", RecMedia);
            pAction->setArgument<std::string>("RecQualityModes", RecQualityModes);
        }
        else if (actionName == "GetTransportSettings") {
            Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
            std::string PlayMode;
            std::string RecQualityMode;
            m_pAVTransportImpl->GetTransportSettings(InstanceID, PlayMode, RecQualityMode);
            pAction->setArgument<std::string>("PlayMode", PlayMode);
            pAction->setArgument<std::string>("RecQualityMode", RecQualityMode);
        }
        else if (actionName == "Stop") {
            Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
            m_pAVTransportImpl->Stop(InstanceID);
        }
        else if (actionName == "Play") {
            Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
            std::string Speed = pAction->getArgument<std::string>("Speed");
            m_pAVTransportImpl->Play(InstanceID, Speed);
        }
        else if (actionName == "Pause") {
            Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
            m_pAVTransportImpl->Pause(InstanceID);
        }
        else if (actionName == "Seek") {
            Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
            std::string Unit = pAction->getArgument<std::string>("Unit");
            std::string Target = pAction->getArgument<std::string>("Target");
            m_pAVTransportImpl->Seek(InstanceID, Unit, Target);
        }
        else if (actionName == "Next") {
            Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
            m_pAVTransportImpl->Next(InstanceID);
        }
        else if (actionName == "Previous") {
            Jamm::ui4 InstanceID = pAction->getArgument<Jamm::ui4>("InstanceID");
            m_pAVTransportImpl->Previous(InstanceID);
        }
    }
    else if (pAction->getService()->getServiceType() == "urn:schemas-upnp-org:service:ConnectionManager:1") {
        m_pConnectionManagerImpl->m_pService = pAction->getService();
        std::string actionName = pAction->getName();

        if (actionName == "GetProtocolInfo") {
            std::string Source;
            std::string Sink;
            m_pConnectionManagerImpl->GetProtocolInfo(Source, Sink);
            pAction->setArgument<std::string>("Source", Source);
            pAction->setArgument<std::string>("Sink", Sink);
        }
        else if (actionName == "ConnectionComplete") {
            Jamm::i4 ConnectionID = pAction->getArgument<Jamm::i4>("ConnectionID");
            m_pConnectionManagerImpl->ConnectionComplete(ConnectionID);
        }
        else if (actionName == "GetCurrentConnectionIDs") {
            std::string ConnectionIDs;
            m_pConnectionManagerImpl->GetCurrentConnectionIDs(ConnectionIDs);
            pAction->setArgument<std::string>("ConnectionIDs", ConnectionIDs);
        }
        else if (actionName == "GetCurrentConnectionInfo") {
            Jamm::i4 ConnectionID = pAction->getArgument<Jamm::i4>("ConnectionID");
            Jamm::i4 RcsID;
            Jamm::i4 AVTransportID;
            std::string ProtocolInfo;
            std::string PeerConnectionManager;
            Jamm::i4 PeerConnectionID;
            std::string Direction;
            std::string Status;
            m_pConnectionManagerImpl->GetCurrentConnectionInfo(ConnectionID, RcsID, AVTransportID, ProtocolInfo, PeerConnectionManager, PeerConnectionID, Direction, Status);
            pAction->setArgument<Jamm::i4>("RcsID", RcsID);
            pAction->setArgument<Jamm::i4>("AVTransportID", AVTransportID);
            pAction->setArgument<std::string>("ProtocolInfo", ProtocolInfo);
            pAction->setArgument<std::string>("PeerConnectionManager", PeerConnectionManager);
            pAction->setArgument<Jamm::i4>("PeerConnectionID", PeerConnectionID);
            pAction->setArgument<std::string>("Direction", Direction);
            pAction->setArgument<std::string>("Status", Status);
        }
    }
    else if (pAction->getService()->getServiceType() == "urn:schemas-upnp-org:service:ContentDirectory:1") {
        m_pContentDirectoryImpl->m_pService = pAction->getService();
        std::string actionName = pAction->getName();

        if (actionName == "GetSearchCapabilities") {
            std::string SearchCaps;
            m_pContentDirectoryImpl->GetSearchCapabilities(SearchCaps);
            pAction->setArgument<std::string>("SearchCaps", SearchCaps);
        }
        else if (actionName == "GetSortCapabilities") {
            std::string SortCaps;
            m_pContentDirectoryImpl->GetSortCapabilities(SortCaps);
            pAction->setArgument<std::string>("SortCaps", SortCaps);
        }
        else if (actionName == "GetSystemUpdateID") {
            Jamm::ui4 Id;
            m_pContentDirectoryImpl->GetSystemUpdateID(Id);
            pAction->setArgument<Jamm::ui4>("Id", Id);
        }
        else if (actionName == "Browse") {
            std::string ObjectID = pAction->getArgument<std::string>("ObjectID");
            std::string BrowseFlag = pAction->getArgument<std::string>("BrowseFlag");
            std::string Filter = pAction->getArgument<std::string>("Filter");
            Jamm::ui4 StartingIndex = pAction->getArgument<Jamm::ui4>("StartingIndex");
            Jamm::ui4 RequestedCount = pAction->getArgument<Jamm::ui4>("RequestedCount");
            std::string SortCriteria = pAction->getArgument<std::string>("SortCriteria");
            std::string Result;
            Jamm::ui4 NumberReturned;
            Jamm::ui4 TotalMatches;
            Jamm::ui4 UpdateID;
            m_pContentDirectoryImpl->Browse(ObjectID, BrowseFlag, Filter, StartingIndex, RequestedCount, SortCriteria, Result, NumberReturned, TotalMatches, UpdateID);
            pAction->setArgument<std::string>("Result", Result);
            pAction->setArgument<Jamm::ui4>("NumberReturned", NumberReturned);
            pAction->setArgument<Jamm::ui4>("TotalMatches", TotalMatches);
            pAction->setArgument<Jamm::ui4>("UpdateID", UpdateID);
        }
        else if (actionName == "Search") {
            std::string ContainerID = pAction->getArgument<std::string>("ContainerID");
            std::string SearchCriteria = pAction->getArgument<std::string>("SearchCriteria");
            std::string Filter = pAction->getArgument<std::string>("Filter");
            Jamm::ui4 StartingIndex = pAction->getArgument<Jamm::ui4>("StartingIndex");
            Jamm::ui4 RequestedCount = pAction->getArgument<Jamm::ui4>("RequestedCount");
            std::string SortCriteria = pAction->getArgument<std::string>("SortCriteria");
            std::string Result;
            Jamm::ui4 NumberReturned;
            Jamm::ui4 TotalMatches;
            Jamm::ui4 UpdateID;
            m_pContentDirectoryImpl->Search(ContainerID, SearchCriteria, Filter, StartingIndex, RequestedCount, SortCriteria, Result, NumberReturned, TotalMatches, UpdateID);
            pAction->setArgument<std::string>("Result", Result);
            pAction->setArgument<Jamm::ui4>("NumberReturned", NumberReturned);
            pAction->setArgument<Jamm::ui4>("TotalMatches", TotalMatches);
            pAction->setArgument<Jamm::ui4>("UpdateID", UpdateID);
        }
        else if (actionName == "CreateObject") {
            std::string ContainerID = pAction->getArgument<std::string>("ContainerID");
            std::string Elements = pAction->getArgument<std::string>("Elements");
            std::string ObjectID;
            std::string Result;
            m_pContentDirectoryImpl->CreateObject(ContainerID, Elements, ObjectID, Result);
            pAction->setArgument<std::string>("ObjectID", ObjectID);
            pAction->setArgument<std::string>("Result", Result);
        }
        else if (actionName == "DestroyObject") {
            std::string ObjectID = pAction->getArgument<std::string>("ObjectID");
            m_pContentDirectoryImpl->DestroyObject(ObjectID);
        }
        else if (actionName == "UpdateObject") {
            std::string ObjectID = pAction->getArgument<std::string>("ObjectID");
            std::string CurrentTagValue = pAction->getArgument<std::string>("CurrentTagValue");
            std::string NewTagValue = pAction->getArgument<std::string>("NewTagValue");
            m_pContentDirectoryImpl->UpdateObject(ObjectID, CurrentTagValue, NewTagValue);
        }
        else if (actionName == "ImportResource") {
            Jamm::uri SourceURI = pAction->getArgument<Jamm::uri>("SourceURI");
            Jamm::uri DestinationURI = pAction->getArgument<Jamm::uri>("DestinationURI");
            Jamm::ui4 TransferID;
            m_pContentDirectoryImpl->ImportResource(SourceURI, DestinationURI, TransferID);
            pAction->setArgument<Jamm::ui4>("TransferID", TransferID);
        }
        else if (actionName == "GetTransferProgress") {
            Jamm::ui4 TransferID = pAction->getArgument<Jamm::ui4>("TransferID");
            std::string TransferStatus;
            std::string TransferLength;
            std::string TransferTotal;
            m_pContentDirectoryImpl->GetTransferProgress(TransferID, TransferStatus, TransferLength, TransferTotal);
            pAction->setArgument<std::string>("TransferStatus", TransferStatus);
            pAction->setArgument<std::string>("TransferLength", TransferLength);
            pAction->setArgument<std::string>("TransferTotal", TransferTotal);
        }
        else if (actionName == "DeleteResource") {
            Jamm::uri ResourceURI = pAction->getArgument<Jamm::uri>("ResourceURI");
            m_pContentDirectoryImpl->DeleteResource(ResourceURI);
        }
        else if (actionName == "CreateReference") {
            std::string ContainerID = pAction->getArgument<std::string>("ContainerID");
            std::string ObjectID = pAction->getArgument<std::string>("ObjectID");
            std::string NewID;
            m_pContentDirectoryImpl->CreateReference(ContainerID, ObjectID, NewID);
            pAction->setArgument<std::string>("NewID", NewID);
        }
    }
}


void
MediaServer::initStateVars(const std::string& serviceType, Service* pThis)
{
    if (serviceType == "urn:schemas-upnp-org:service:AVTransport:1") {
        m_pAVTransportImpl->m_pService = pThis;
        m_pAVTransportImpl->initStateVars();
    }
    else if (serviceType == "urn:schemas-upnp-org:service:ConnectionManager:1") {
        m_pConnectionManagerImpl->m_pService = pThis;
        m_pConnectionManagerImpl->initStateVars();
    }
    else if (serviceType == "urn:schemas-upnp-org:service:ContentDirectory:1") {
        m_pContentDirectoryImpl->m_pService = pThis;
        m_pContentDirectoryImpl->initStateVars();
    }
}


MediaServer::MediaServer(ContentDirectory* pContentDirectoryImpl, ConnectionManager* pConnectionManagerImpl, AVTransport* pAVTransportImpl) :
DeviceRootImplAdapter(),
m_pContentDirectoryImpl(pContentDirectoryImpl), 
m_pConnectionManagerImpl(pConnectionManagerImpl), 
m_pAVTransportImpl(pAVTransportImpl)
{
    m_descriptions["/MediaServer.xml"] = &MediaServer::m_deviceDescription;
    m_descriptions["/ContentDirectory.xml"] = &ContentDirectory::m_description;
    m_descriptions["/ConnectionManager.xml"] = &ConnectionManager::m_description;
    m_descriptions["/AVTransport.xml"] = &AVTransport::m_description;

    Jamm::StringDescriptionReader descriptionReader(m_descriptions, "/MediaServer.xml");
    m_pDeviceRoot = descriptionReader.deviceRoot();
    m_pDeviceRoot->setImplAdapter(this);
}


void
AVTransport::_setTransportState(const std::string& val)
{
    m_pService->setStateVar<std::string>("TransportState", val);
}

std::string
AVTransport::_getTransportState()
{
    return m_pService->getStateVar<std::string>("TransportState");
}

void
AVTransport::_setTransportStatus(const std::string& val)
{
    m_pService->setStateVar<std::string>("TransportStatus", val);
}

std::string
AVTransport::_getTransportStatus()
{
    return m_pService->getStateVar<std::string>("TransportStatus");
}

void
AVTransport::_setPlaybackStorageMedium(const std::string& val)
{
    m_pService->setStateVar<std::string>("PlaybackStorageMedium", val);
}

std::string
AVTransport::_getPlaybackStorageMedium()
{
    return m_pService->getStateVar<std::string>("PlaybackStorageMedium");
}

void
AVTransport::_setRecordStorageMedium(const std::string& val)
{
    m_pService->setStateVar<std::string>("RecordStorageMedium", val);
}

std::string
AVTransport::_getRecordStorageMedium()
{
    return m_pService->getStateVar<std::string>("RecordStorageMedium");
}

void
AVTransport::_setPossiblePlaybackStorageMedia(const std::string& val)
{
    m_pService->setStateVar<std::string>("PossiblePlaybackStorageMedia", val);
}

std::string
AVTransport::_getPossiblePlaybackStorageMedia()
{
    return m_pService->getStateVar<std::string>("PossiblePlaybackStorageMedia");
}

void
AVTransport::_setPossibleRecordStorageMedia(const std::string& val)
{
    m_pService->setStateVar<std::string>("PossibleRecordStorageMedia", val);
}

std::string
AVTransport::_getPossibleRecordStorageMedia()
{
    return m_pService->getStateVar<std::string>("PossibleRecordStorageMedia");
}

void
AVTransport::_setCurrentPlayMode(const std::string& val)
{
    m_pService->setStateVar<std::string>("CurrentPlayMode", val);
}

std::string
AVTransport::_getCurrentPlayMode()
{
    return m_pService->getStateVar<std::string>("CurrentPlayMode");
}

void
AVTransport::_setTransportPlaySpeed(const std::string& val)
{
    m_pService->setStateVar<std::string>("TransportPlaySpeed", val);
}

std::string
AVTransport::_getTransportPlaySpeed()
{
    return m_pService->getStateVar<std::string>("TransportPlaySpeed");
}

void
AVTransport::_setRecordMediumWriteStatus(const std::string& val)
{
    m_pService->setStateVar<std::string>("RecordMediumWriteStatus", val);
}

std::string
AVTransport::_getRecordMediumWriteStatus()
{
    return m_pService->getStateVar<std::string>("RecordMediumWriteStatus");
}

void
AVTransport::_setCurrentRecordQualityMode(const std::string& val)
{
    m_pService->setStateVar<std::string>("CurrentRecordQualityMode", val);
}

std::string
AVTransport::_getCurrentRecordQualityMode()
{
    return m_pService->getStateVar<std::string>("CurrentRecordQualityMode");
}

void
AVTransport::_setPossibleRecordQualityModes(const std::string& val)
{
    m_pService->setStateVar<std::string>("PossibleRecordQualityModes", val);
}

std::string
AVTransport::_getPossibleRecordQualityModes()
{
    return m_pService->getStateVar<std::string>("PossibleRecordQualityModes");
}

void
AVTransport::_setNumberOfTracks(const Jamm::ui4& val)
{
    m_pService->setStateVar<Jamm::ui4>("NumberOfTracks", val);
}

Jamm::ui4
AVTransport::_getNumberOfTracks()
{
    return m_pService->getStateVar<Jamm::ui4>("NumberOfTracks");
}

void
AVTransport::_setCurrentTrack(const Jamm::ui4& val)
{
    m_pService->setStateVar<Jamm::ui4>("CurrentTrack", val);
}

Jamm::ui4
AVTransport::_getCurrentTrack()
{
    return m_pService->getStateVar<Jamm::ui4>("CurrentTrack");
}

void
AVTransport::_setCurrentTrackDuration(const std::string& val)
{
    m_pService->setStateVar<std::string>("CurrentTrackDuration", val);
}

std::string
AVTransport::_getCurrentTrackDuration()
{
    return m_pService->getStateVar<std::string>("CurrentTrackDuration");
}

void
AVTransport::_setCurrentMediaDuration(const std::string& val)
{
    m_pService->setStateVar<std::string>("CurrentMediaDuration", val);
}

std::string
AVTransport::_getCurrentMediaDuration()
{
    return m_pService->getStateVar<std::string>("CurrentMediaDuration");
}

void
AVTransport::_setCurrentTrackMetaData(const std::string& val)
{
    m_pService->setStateVar<std::string>("CurrentTrackMetaData", val);
}

std::string
AVTransport::_getCurrentTrackMetaData()
{
    return m_pService->getStateVar<std::string>("CurrentTrackMetaData");
}

void
AVTransport::_setCurrentTrackURI(const std::string& val)
{
    m_pService->setStateVar<std::string>("CurrentTrackURI", val);
}

std::string
AVTransport::_getCurrentTrackURI()
{
    return m_pService->getStateVar<std::string>("CurrentTrackURI");
}

void
AVTransport::_setAVTransportURI(const std::string& val)
{
    m_pService->setStateVar<std::string>("AVTransportURI", val);
}

std::string
AVTransport::_getAVTransportURI()
{
    return m_pService->getStateVar<std::string>("AVTransportURI");
}

void
AVTransport::_setAVTransportURIMetaData(const std::string& val)
{
    m_pService->setStateVar<std::string>("AVTransportURIMetaData", val);
}

std::string
AVTransport::_getAVTransportURIMetaData()
{
    return m_pService->getStateVar<std::string>("AVTransportURIMetaData");
}

void
AVTransport::_setNextAVTransportURI(const std::string& val)
{
    m_pService->setStateVar<std::string>("NextAVTransportURI", val);
}

std::string
AVTransport::_getNextAVTransportURI()
{
    return m_pService->getStateVar<std::string>("NextAVTransportURI");
}

void
AVTransport::_setNextAVTransportURIMetaData(const std::string& val)
{
    m_pService->setStateVar<std::string>("NextAVTransportURIMetaData", val);
}

std::string
AVTransport::_getNextAVTransportURIMetaData()
{
    return m_pService->getStateVar<std::string>("NextAVTransportURIMetaData");
}

void
AVTransport::_setRelativeTimePosition(const std::string& val)
{
    m_pService->setStateVar<std::string>("RelativeTimePosition", val);
}

std::string
AVTransport::_getRelativeTimePosition()
{
    return m_pService->getStateVar<std::string>("RelativeTimePosition");
}

void
AVTransport::_setAbsoluteTimePosition(const std::string& val)
{
    m_pService->setStateVar<std::string>("AbsoluteTimePosition", val);
}

std::string
AVTransport::_getAbsoluteTimePosition()
{
    return m_pService->getStateVar<std::string>("AbsoluteTimePosition");
}

void
AVTransport::_setRelativeCounterPosition(const Jamm::i4& val)
{
    m_pService->setStateVar<Jamm::i4>("RelativeCounterPosition", val);
}

Jamm::i4
AVTransport::_getRelativeCounterPosition()
{
    return m_pService->getStateVar<Jamm::i4>("RelativeCounterPosition");
}

void
AVTransport::_setAbsoluteCounterPosition(const Jamm::i4& val)
{
    m_pService->setStateVar<Jamm::i4>("AbsoluteCounterPosition", val);
}

Jamm::i4
AVTransport::_getAbsoluteCounterPosition()
{
    return m_pService->getStateVar<Jamm::i4>("AbsoluteCounterPosition");
}

void
AVTransport::_setCurrentTransportActions(const std::string& val)
{
    m_pService->setStateVar<std::string>("CurrentTransportActions", val);
}

std::string
AVTransport::_getCurrentTransportActions()
{
    return m_pService->getStateVar<std::string>("CurrentTransportActions");
}

void
AVTransport::_setLastChange(const std::string& val)
{
    m_pService->setStateVar<std::string>("LastChange", val);
}

std::string
AVTransport::_getLastChange()
{
    return m_pService->getStateVar<std::string>("LastChange");
}

void
ConnectionManager::_setSourceProtocolInfo(const std::string& val)
{
    m_pService->setStateVar<std::string>("SourceProtocolInfo", val);
}

std::string
ConnectionManager::_getSourceProtocolInfo()
{
    return m_pService->getStateVar<std::string>("SourceProtocolInfo");
}

void
ConnectionManager::_setSinkProtocolInfo(const std::string& val)
{
    m_pService->setStateVar<std::string>("SinkProtocolInfo", val);
}

std::string
ConnectionManager::_getSinkProtocolInfo()
{
    return m_pService->getStateVar<std::string>("SinkProtocolInfo");
}

void
ConnectionManager::_setCurrentConnectionIDs(const std::string& val)
{
    m_pService->setStateVar<std::string>("CurrentConnectionIDs", val);
}

std::string
ConnectionManager::_getCurrentConnectionIDs()
{
    return m_pService->getStateVar<std::string>("CurrentConnectionIDs");
}

void
ContentDirectory::_setTransferIDs(const std::string& val)
{
    m_pService->setStateVar<std::string>("TransferIDs", val);
}

std::string
ContentDirectory::_getTransferIDs()
{
    return m_pService->getStateVar<std::string>("TransferIDs");
}

void
ContentDirectory::_setSearchCapabilities(const std::string& val)
{
    m_pService->setStateVar<std::string>("SearchCapabilities", val);
}

std::string
ContentDirectory::_getSearchCapabilities()
{
    return m_pService->getStateVar<std::string>("SearchCapabilities");
}

void
ContentDirectory::_setSortCapabilities(const std::string& val)
{
    m_pService->setStateVar<std::string>("SortCapabilities", val);
}

std::string
ContentDirectory::_getSortCapabilities()
{
    return m_pService->getStateVar<std::string>("SortCapabilities");
}

void
ContentDirectory::_setSystemUpdateID(const Jamm::ui4& val)
{
    m_pService->setStateVar<Jamm::ui4>("SystemUpdateID", val);
}

Jamm::ui4
ContentDirectory::_getSystemUpdateID()
{
    return m_pService->getStateVar<Jamm::ui4>("SystemUpdateID");
}

void
ContentDirectory::_setContainerUpdateIDs(const std::string& val)
{
    m_pService->setStateVar<std::string>("ContainerUpdateIDs", val);
}

std::string
ContentDirectory::_getContainerUpdateIDs()
{
    return m_pService->getStateVar<std::string>("ContainerUpdateIDs");
}


