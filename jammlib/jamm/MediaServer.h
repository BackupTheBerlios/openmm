/***************************************************************************|
|  Jamm - Just another multimedia ...                                       |
|         ... set of applications and libraries based on the UPnP-AV specs  |
|                                                                           |
|  Copyright (C) 2009                                                       |
|  JÃ¶rg Bakker (joerg'at'hakker'dot'de)                                     |
|                                                                           |
|  This file is part of Jamm.                                               |
|                                                                           |
|  Jamm is free software: you can redistribute it and/or modify             |
|  it under the terms of the GNU General Public License as published by     |
|  the Free Software Foundation version 3 of the License.                   |
|                                                                           |
|  Jamm is distributed in the hope that it will be useful,                  |
|  but WITHOUT ANY WARRANTY; without even the implied warranty of           |
|  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
|  GNU General Public License for more details.                             |
|                                                                           |
|  You should have received a copy of the GNU General Public License        |
|  along with this program.  If not, see <http://www.gnu.org/licenses/>.    |
***************************************************************************/

/***************************************************************************|
|                               WARNING                                     |
|        This file is generated by the jamm stub generator jammgen.         |
|       Don't edit, it will be overriden at the next run of jammgen.        |
***************************************************************************/

#ifndef MEDIASERVER_H
#define MEDIASERVER_H

// #include <jamm/upnp.h>
#include "upnp.h"

using Jamm::DeviceRootImplAdapter;
using Jamm::Service;
using Jamm::Action;

class MediaServer;

class AVTransport
{
    friend class MediaServer;

protected:
    virtual void SetAVTransportURI(const Jamm::ui4& InstanceID, const std::string& CurrentURI, const std::string& CurrentURIMetaData) = 0;
    virtual void GetMediaInfo(const Jamm::ui4& InstanceID, Jamm::ui4& NrTracks, std::string& MediaDuration, std::string& CurrentURI, std::string& CurrentURIMetaData, std::string& NextURI, std::string& NextURIMetaData, std::string& PlayMedium, std::string& RecordMedium, std::string& WriteStatus) = 0;
    virtual void GetTransportInfo(const Jamm::ui4& InstanceID, std::string& CurrentTransportState, std::string& CurrentTransportStatus, std::string& CurrentSpeed) = 0;
    virtual void GetPositionInfo(const Jamm::ui4& InstanceID, Jamm::ui4& Track, std::string& TrackDuration, std::string& TrackMetaData, std::string& TrackURI, std::string& RelTime, std::string& AbsTime, Jamm::i4& RelCount, Jamm::i4& AbsCount) = 0;
    virtual void GetDeviceCapabilities(const Jamm::ui4& InstanceID, std::string& PlayMedia, std::string& RecMedia, std::string& RecQualityModes) = 0;
    virtual void GetTransportSettings(const Jamm::ui4& InstanceID, std::string& PlayMode, std::string& RecQualityMode) = 0;
    virtual void Stop(const Jamm::ui4& InstanceID) = 0;
    virtual void Play(const Jamm::ui4& InstanceID, const std::string& Speed) = 0;
    virtual void Pause(const Jamm::ui4& InstanceID) = 0;
    virtual void Seek(const Jamm::ui4& InstanceID, const std::string& Unit, const std::string& Target) = 0;
    virtual void Next(const Jamm::ui4& InstanceID) = 0;
    virtual void Previous(const Jamm::ui4& InstanceID) = 0;

    virtual void initStateVars() = 0;

    void _setTransportState(const std::string& val);
    std::string _getTransportState();
    void _setTransportStatus(const std::string& val);
    std::string _getTransportStatus();
    void _setPlaybackStorageMedium(const std::string& val);
    std::string _getPlaybackStorageMedium();
    void _setRecordStorageMedium(const std::string& val);
    std::string _getRecordStorageMedium();
    void _setPossiblePlaybackStorageMedia(const std::string& val);
    std::string _getPossiblePlaybackStorageMedia();
    void _setPossibleRecordStorageMedia(const std::string& val);
    std::string _getPossibleRecordStorageMedia();
    void _setCurrentPlayMode(const std::string& val);
    std::string _getCurrentPlayMode();
    void _setTransportPlaySpeed(const std::string& val);
    std::string _getTransportPlaySpeed();
    void _setRecordMediumWriteStatus(const std::string& val);
    std::string _getRecordMediumWriteStatus();
    void _setCurrentRecordQualityMode(const std::string& val);
    std::string _getCurrentRecordQualityMode();
    void _setPossibleRecordQualityModes(const std::string& val);
    std::string _getPossibleRecordQualityModes();
    void _setNumberOfTracks(const Jamm::ui4& val);
    Jamm::ui4 _getNumberOfTracks();
    void _setCurrentTrack(const Jamm::ui4& val);
    Jamm::ui4 _getCurrentTrack();
    void _setCurrentTrackDuration(const std::string& val);
    std::string _getCurrentTrackDuration();
    void _setCurrentMediaDuration(const std::string& val);
    std::string _getCurrentMediaDuration();
    void _setCurrentTrackMetaData(const std::string& val);
    std::string _getCurrentTrackMetaData();
    void _setCurrentTrackURI(const std::string& val);
    std::string _getCurrentTrackURI();
    void _setAVTransportURI(const std::string& val);
    std::string _getAVTransportURI();
    void _setAVTransportURIMetaData(const std::string& val);
    std::string _getAVTransportURIMetaData();
    void _setNextAVTransportURI(const std::string& val);
    std::string _getNextAVTransportURI();
    void _setNextAVTransportURIMetaData(const std::string& val);
    std::string _getNextAVTransportURIMetaData();
    void _setRelativeTimePosition(const std::string& val);
    std::string _getRelativeTimePosition();
    void _setAbsoluteTimePosition(const std::string& val);
    std::string _getAbsoluteTimePosition();
    void _setRelativeCounterPosition(const Jamm::i4& val);
    Jamm::i4 _getRelativeCounterPosition();
    void _setAbsoluteCounterPosition(const Jamm::i4& val);
    Jamm::i4 _getAbsoluteCounterPosition();
    void _setCurrentTransportActions(const std::string& val);
    std::string _getCurrentTransportActions();
    void _setLastChange(const std::string& val);
    std::string _getLastChange();

private:
    static std::string  m_description;
    Service* m_pService;
};


class ConnectionManager
{
    friend class MediaServer;

protected:
    virtual void GetProtocolInfo(std::string& Source, std::string& Sink) = 0;
    virtual void ConnectionComplete(const Jamm::i4& ConnectionID) = 0;
    virtual void GetCurrentConnectionIDs(std::string& ConnectionIDs) = 0;
    virtual void GetCurrentConnectionInfo(const Jamm::i4& ConnectionID, Jamm::i4& RcsID, Jamm::i4& AVTransportID, std::string& ProtocolInfo, std::string& PeerConnectionManager, Jamm::i4& PeerConnectionID, std::string& Direction, std::string& Status) = 0;

    virtual void initStateVars() = 0;

    void _setSourceProtocolInfo(const std::string& val);
    std::string _getSourceProtocolInfo();
    void _setSinkProtocolInfo(const std::string& val);
    std::string _getSinkProtocolInfo();
    void _setCurrentConnectionIDs(const std::string& val);
    std::string _getCurrentConnectionIDs();

private:
    static std::string  m_description;
    Service* m_pService;
};


class ContentDirectory
{
    friend class MediaServer;

protected:
    virtual void GetSearchCapabilities(std::string& SearchCaps) = 0;
    virtual void GetSortCapabilities(std::string& SortCaps) = 0;
    virtual void GetSystemUpdateID(Jamm::ui4& Id) = 0;
    virtual void Browse(const std::string& ObjectID, const std::string& BrowseFlag, const std::string& Filter, const Jamm::ui4& StartingIndex, const Jamm::ui4& RequestedCount, const std::string& SortCriteria, std::string& Result, Jamm::ui4& NumberReturned, Jamm::ui4& TotalMatches, Jamm::ui4& UpdateID) = 0;
    virtual void Search(const std::string& ContainerID, const std::string& SearchCriteria, const std::string& Filter, const Jamm::ui4& StartingIndex, const Jamm::ui4& RequestedCount, const std::string& SortCriteria, std::string& Result, Jamm::ui4& NumberReturned, Jamm::ui4& TotalMatches, Jamm::ui4& UpdateID) = 0;
    virtual void CreateObject(const std::string& ContainerID, const std::string& Elements, std::string& ObjectID, std::string& Result) = 0;
    virtual void DestroyObject(const std::string& ObjectID) = 0;
    virtual void UpdateObject(const std::string& ObjectID, const std::string& CurrentTagValue, const std::string& NewTagValue) = 0;
    virtual void ImportResource(const Jamm::uri& SourceURI, const Jamm::uri& DestinationURI, Jamm::ui4& TransferID) = 0;
    virtual void GetTransferProgress(const Jamm::ui4& TransferID, std::string& TransferStatus, std::string& TransferLength, std::string& TransferTotal) = 0;
    virtual void DeleteResource(const Jamm::uri& ResourceURI) = 0;
    virtual void CreateReference(const std::string& ContainerID, const std::string& ObjectID, std::string& NewID) = 0;

    virtual void initStateVars() = 0;

    void _setTransferIDs(const std::string& val);
    std::string _getTransferIDs();
    void _setSearchCapabilities(const std::string& val);
    std::string _getSearchCapabilities();
    void _setSortCapabilities(const std::string& val);
    std::string _getSortCapabilities();
    void _setSystemUpdateID(const Jamm::ui4& val);
    Jamm::ui4 _getSystemUpdateID();
    void _setContainerUpdateIDs(const std::string& val);
    std::string _getContainerUpdateIDs();

private:
    static std::string  m_description;
    Service* m_pService;
};


class MediaServer : public DeviceRootImplAdapter
{
public:
    MediaServer(ContentDirectory* pContentDirectoryImpl, ConnectionManager* pConnectionManagerImpl, AVTransport* pAVTransportImpl);


private:
    virtual void actionHandler(Action* action);
    virtual void initStateVars(const std::string& serviceType, Service* pThis);

    static std::string m_deviceDescription;
    ContentDirectory* m_pContentDirectoryImpl;
    ConnectionManager* m_pConnectionManagerImpl;
    AVTransport* m_pAVTransportImpl;
};

#endif

