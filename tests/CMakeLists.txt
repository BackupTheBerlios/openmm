CMAKE_MINIMUM_REQUIRED(VERSION 2.6.2)

PROJECT(tests)

FIND_PATH(POCO_INCLUDE_DIR
Poco/Poco.h
PATHS ${CMAKE_INCLUDE_PATH}
)
if(POCO_INCLUDE_DIR)
message(STATUS "Poco headers found in " ${POCO_INCLUDE_DIR})
else(POCO_INCLUDE_DIR)
message(SEND_ERROR "Poco headers not found")
endif(POCO_INCLUDE_DIR)

FIND_LIBRARY(LIB_POCO_FOUNDATION
NAME PocoFoundation
PATHS ${CMAKE_LIBRARY_PATH}
)

FIND_LIBRARY(LIB_POCO_UTIL
NAME PocoUtil
PATHS ${CMAKE_LIBRARY_PATH}
)

FIND_LIBRARY(LIB_POCO_NET
NAME PocoNet
PATHS ${CMAKE_LIBRARY_PATH}
)

FIND_LIBRARY(LIB_POCO_XML
NAME PocoXML
PATHS ${CMAKE_LIBRARY_PATH}
)

if(LIB_POCO_FOUNDATION AND LIB_POCO_UTIL AND LIB_POCO_NET AND LIB_POCO_XML)
message(STATUS "Poco libraries found: " ${LIB_POCO_FOUNDATION} ", " ${LIB_POCO_UTIL} ", " ${LIB_POCO_NET} ", " ${LIB_POCO_XML})
else(LIB_POCO_FOUNDATION AND LIB_POCO_UTIL AND LIB_POCO_NET AND LIB_POCO_XML)
message(SEND_ERROR "Poco libraries not found")
endif(LIB_POCO_FOUNDATION AND LIB_POCO_UTIL AND LIB_POCO_NET AND LIB_POCO_XML)

if(POCO_INCLUDE_DIR AND LIB_POCO_FOUNDATION AND LIB_POCO_UTIL AND LIB_POCO_NET AND LIB_POCO_XML)

INCLUDE_DIRECTORIES(
${POCO_INCLUDE_DIR}
${omm_SOURCE_DIR}/lib
${omm_SOURCE_DIR}/lib/Omm
${omm_SOURCE_DIR}/lib/src
)

SET(LIB_OMM
omm
)

SET(LIB_OMM_UTIL
ommutil
)

SET(LIB_OMM_AV
ommav
)

SET(LIB_OMM_AV_STREAM
ommavstream
)


SET( OMMTEST_SSDP_SRCS
ssdp.cpp
)

SET( OMMTEST_DEVICE_SRCS
device.cpp
)

# SET( OMMTEST_NETWORK_LIGHT_SRCS
# network_light.cpp
# network_light_implementation.cpp
# network_light_application.cpp
# )

SET( OMMTEST_OMMLIGHT_CTRL_SRCS
netlight_ctrl.cpp
netlight_ctrl_impl.cpp
netlight_ctrl_appl.cpp
)

SET( OMMTEST_CONTROLLER_SRCS
controller.cpp
)

SET( OMMTEST_MEDIAOBJECT_SRCS
MediaObjectTest.cpp
)

# SET( OMMTEST_HTTPFILESERVER_SRCS
# HttpFileServerTest.cpp
# )

#list all source files here
# ADD_EXECUTABLE( ssdp_test
# ${OMMTEST_SSDP_SRCS}
# )
# 
# ADD_EXECUTABLE( device_test
# ${OMMTEST_DEVICE_SRCS}
# )

# ADD_EXECUTABLE( network_light
# ${OMMTEST_NETWORK_LIGHT_SRCS}
# )

# ADD_EXECUTABLE( netlight_ctrl
# ${OMMTEST_OMMLIGHT_CTRL_SRCS}
# )
# 
# ADD_EXECUTABLE( controller_test
# ${OMMTEST_CONTROLLER_SRCS}
# )
# 
# ADD_EXECUTABLE( media_object_test
# ${OMMTEST_MEDIAOBJECT_SRCS}
# )

# ADD_EXECUTABLE( file_server_test
# ${OMMTEST_HTTPFILESERVER_SRCS}
# )


# TARGET_LINK_LIBRARIES( ssdp_test
# ${LIB_OMM}
# ${LIB_POCO_UTIL}
# )
# 
# TARGET_LINK_LIBRARIES( device_test
# ${LIB_OMM}
# ${LIB_POCO_UTIL}
# )

# TARGET_LINK_LIBRARIES( network_light
# ${LIB_OMM}
# ${LIB_POCO_UTIL}
# )

# TARGET_LINK_LIBRARIES( netlight_ctrl
# ${LIB_OMM}
# ${LIB_POCO_UTIL}
# )
# 
# TARGET_LINK_LIBRARIES( controller_test
# ${LIB_OMM}
# ${LIB_POCO_UTIL}
# )
# 
# TARGET_LINK_LIBRARIES( media_object_test
# ${LIB_OMM_AV}
# )

# TARGET_LINK_LIBRARIES( file_server_test
# ${LIB_OMM_AV}
# ${LIB_POCO_UTIL}
# )


SET( OMMTEST_AV_STREAM_PLAY_SRCS
../renderer/src/avstream/AvStreamEngine.cpp
AvStreamPlay.cpp
)

ADD_EXECUTABLE( avstreamplay
${OMMTEST_AV_STREAM_PLAY_SRCS}
)

TARGET_LINK_LIBRARIES( avstreamplay
${LIB_OMM_AV_STREAM}
${LIB_OMM_AV}
${LIB_OMM_UTIL}
${LIB_POCO_UTIL}
)

SET( OMMTEST_AV_STREAM_STRESS_SRCS
../renderer/src/avstream/AvStreamEngine.cpp
AvStreamStress.cpp
)

ADD_EXECUTABLE( avstreamstress
${OMMTEST_AV_STREAM_STRESS_SRCS}
)

TARGET_LINK_LIBRARIES( avstreamstress
${LIB_OMM_AV_STREAM}
${LIB_OMM_AV}
${LIB_OMM_UTIL}
)

SET( OMMTEST_BYTEQUEUE_STRESS_SRCS
ByteQueueStress.cpp
)

ADD_EXECUTABLE( bytequeuestress
${OMMTEST_BYTEQUEUE_STRESS_SRCS}
)

TARGET_LINK_LIBRARIES( bytequeuestress
${LIB_OMM_AV_STREAM}
)

SET( OMMTEST_TAG_TEST_SRCS
TagTest.cpp
)

ADD_EXECUTABLE( tagtest
${OMMTEST_TAG_TEST_SRCS}
)

TARGET_LINK_LIBRARIES( tagtest
${LIB_OMM_AV_STREAM}
${LIB_OMM_UTIL}
)

ADD_EXECUTABLE( tag
Tag.cpp
)

TARGET_LINK_LIBRARIES( tag
${LIB_OMM_AV_STREAM}
${LIB_OMM_UTIL}
)

ADD_EXECUTABLE( streamtest
StreamTest.cpp
)

TARGET_LINK_LIBRARIES( streamtest
${LIB_POCO_FOUNDATION}
${LIB_POCO_NET}
)

SET( OMMTEST_AV_MUX_SRCS
AvMux.cpp
)

ADD_EXECUTABLE( avmux
${OMMTEST_AV_MUX_SRCS}
)

TARGET_LINK_LIBRARIES( avmux
${LIB_OMM_AV_STREAM}
${LIB_POCO_UTIL}
)

elseif(POCO_INCLUDE_DIR AND LIB_POCO_FOUNDATION AND LIB_POCO_UTIL AND LIB_POCO_NET AND LIB_POCO_XML)
message(SEND_ERROR "Poco libraries not found, cannot build project.")
endif(POCO_INCLUDE_DIR AND LIB_POCO_FOUNDATION AND LIB_POCO_UTIL AND LIB_POCO_NET AND LIB_POCO_XML)
