/***************************************************************************|
|  Jamm - Just another multimedia ...                                       |
|         ... set of applications and libraries based on the UPnP-AV specs  |
|                                                                           |
|  Copyright (C) 2009                                                       |
|  JÃ¶rg Bakker (joerg'at'hakker'dot'de)                                     |
|                                                                           |
|  This file is part of Jamm.                                               |
|                                                                           |
|  Jamm is free software: you can redistribute it and/or modify             |
|  it under the terms of the GNU General Public License as published by     |
|  the Free Software Foundation version 3 of the License.                   |
|                                                                           |
|  Jamm is distributed in the hope that it will be useful,                  |
|  but WITHOUT ANY WARRANTY; without even the implied warranty of           |
|  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
|  GNU General Public License for more details.                             |
|                                                                           |
|  You should have received a copy of the GNU General Public License        |
|  along with this program.  If not, see <http://www.gnu.org/licenses/>.    |
***************************************************************************/

/***************************************************************************|
|                               WARNING                                     |
|        This file is generated by the jamm stub generator jammgen.         |
|       Don't edit, it will be overriden at the next run of jammgen.        |
***************************************************************************/

#include "DimmableLightCtrl.h"

void
DimmingController::SetLoadLevelTarget(const Jamm::ui1& newLoadlevelTarget)
{
    Jamm::Action* pAction = m_pService->getAction("SetLoadLevelTarget")->clone();
    pAction->setArgument<Jamm::ui1>("newLoadlevelTarget", newLoadlevelTarget);
    m_pService->sendAction(pAction);
}

void
DimmingController::GetLoadLevelTarget(Jamm::ui1& retLoadlevelTarget)
{
    Jamm::Action* pAction = m_pService->getAction("GetLoadLevelTarget")->clone();
    m_pService->sendAction(pAction);
    retLoadlevelTarget = pAction->getArgument<Jamm::ui1>("retLoadlevelTarget");
}

void
DimmingController::GetLoadLevelStatus(Jamm::ui1& retLoadlevelStatus)
{
    Jamm::Action* pAction = m_pService->getAction("GetLoadLevelStatus")->clone();
    m_pService->sendAction(pAction);
    retLoadlevelStatus = pAction->getArgument<Jamm::ui1>("retLoadlevelStatus");
}

Jamm::ui1
DimmingController::_getLoadLevelStatus()
{
    return m_pService->getStateVar<Jamm::ui1>("LoadLevelStatus");
}


void 
DimmingController::_reqSetLoadLevelTarget(const Jamm::ui1& newLoadlevelTarget)
{
    Jamm::Action* pAction = m_pService->getAction("SetLoadLevelTarget")->clone();
    pAction->setArgument<Jamm::ui1>("newLoadlevelTarget", newLoadlevelTarget);
    Jamm::ActionThread<DimmingController> thread(this, &DimmingController::_threadSetLoadLevelTarget, pAction);
    thread.start();
}

void 
DimmingController::_reqGetLoadLevelTarget()
{
    Jamm::Action* pAction = m_pService->getAction("GetLoadLevelTarget")->clone();
    Jamm::ActionThread<DimmingController> thread(this, &DimmingController::_threadGetLoadLevelTarget, pAction);
    thread.start();
}

void 
DimmingController::_reqGetLoadLevelStatus()
{
    Jamm::Action* pAction = m_pService->getAction("GetLoadLevelStatus")->clone();
    Jamm::ActionThread<DimmingController> thread(this, &DimmingController::_threadGetLoadLevelStatus, pAction);
    thread.start();
}

void 
DimmingController::_threadSetLoadLevelTarget(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    Jamm::ui1 newLoadlevelTarget = pAction->getArgument<Jamm::ui1>("newLoadlevelTarget");
    _ansSetLoadLevelTarget(newLoadlevelTarget);
}

void 
DimmingController::_threadGetLoadLevelTarget(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    Jamm::ui1 retLoadlevelTarget = pAction->getArgument<Jamm::ui1>("retLoadlevelTarget");
    _ansGetLoadLevelTarget(retLoadlevelTarget);
}

void 
DimmingController::_threadGetLoadLevelStatus(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    Jamm::ui1 retLoadlevelStatus = pAction->getArgument<Jamm::ui1>("retLoadlevelStatus");
    _ansGetLoadLevelStatus(retLoadlevelStatus);
}



void
SwitchPowerController::SetTarget(const bool& NewTargetValue)
{
    Jamm::Action* pAction = m_pService->getAction("SetTarget")->clone();
    pAction->setArgument<bool>("NewTargetValue", NewTargetValue);
    m_pService->sendAction(pAction);
}

void
SwitchPowerController::GetTarget(bool& RetTargetValue)
{
    Jamm::Action* pAction = m_pService->getAction("GetTarget")->clone();
    m_pService->sendAction(pAction);
    RetTargetValue = pAction->getArgument<bool>("RetTargetValue");
}

void
SwitchPowerController::GetStatus(bool& ResultStatus)
{
    Jamm::Action* pAction = m_pService->getAction("GetStatus")->clone();
    m_pService->sendAction(pAction);
    ResultStatus = pAction->getArgument<bool>("ResultStatus");
}

bool
SwitchPowerController::_getStatus()
{
    return m_pService->getStateVar<bool>("Status");
}


void 
SwitchPowerController::_reqSetTarget(const bool& NewTargetValue)
{
    Jamm::Action* pAction = m_pService->getAction("SetTarget")->clone();
    pAction->setArgument<bool>("NewTargetValue", NewTargetValue);
    Jamm::ActionThread<SwitchPowerController> thread(this, &SwitchPowerController::_threadSetTarget, pAction);
    thread.start();
}

void 
SwitchPowerController::_reqGetTarget()
{
    Jamm::Action* pAction = m_pService->getAction("GetTarget")->clone();
    Jamm::ActionThread<SwitchPowerController> thread(this, &SwitchPowerController::_threadGetTarget, pAction);
    thread.start();
}

void 
SwitchPowerController::_reqGetStatus()
{
    Jamm::Action* pAction = m_pService->getAction("GetStatus")->clone();
    Jamm::ActionThread<SwitchPowerController> thread(this, &SwitchPowerController::_threadGetStatus, pAction);
    thread.start();
}

void 
SwitchPowerController::_threadSetTarget(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    bool NewTargetValue = pAction->getArgument<bool>("NewTargetValue");
    _ansSetTarget(NewTargetValue);
}

void 
SwitchPowerController::_threadGetTarget(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    bool RetTargetValue = pAction->getArgument<bool>("RetTargetValue");
    _ansGetTarget(RetTargetValue);
}

void 
SwitchPowerController::_threadGetStatus(Jamm::Action* pAction)
{
    m_pService->sendAction(pAction);
    bool ResultStatus = pAction->getArgument<bool>("ResultStatus");
    _ansGetStatus(ResultStatus);
}



void
DimmableLightController::eventHandler(Jamm::StateVar* pStateVar)
{
    if (pStateVar->getName() == "LoadLevelStatus") {
        Jamm::ui1 val;
        pStateVar->getValue(val);
        m_pDimmingController->_changedLoadLevelStatus(val);
    }
    else if (pStateVar->getName() == "Status") {
        bool val;
        pStateVar->getValue(val);
        m_pSwitchPowerController->_changedStatus(val);
    }
}


DimmableLightController::DimmableLightController(Jamm::Device* pDevice, SwitchPowerController* pSwitchPowerController, DimmingController* pDimmingController) :
ControllerImplAdapter(pDevice),
m_pDevice(pDevice),
m_pSwitchPowerController(pSwitchPowerController), 
m_pDimmingController(pDimmingController)
{
    m_pSwitchPowerController->m_pService = m_pDevice->getService("urn:schemas-upnp-org:service:SwitchPower:1");
    m_pDimmingController->m_pService = m_pDevice->getService("urn:schemas-upnp-org:service:Dimming:1");

    init();
}

