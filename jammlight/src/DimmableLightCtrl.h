/***************************************************************************|
|  Jamm - Just another multimedia ...                                       |
|         ... set of applications and libraries based on the UPnP-AV specs  |
|                                                                           |
|  Copyright (C) 2009                                                       |
|  JÃ¶rg Bakker (joerg'at'hakker'dot'de)                                     |
|                                                                           |
|  This file is part of Jamm.                                               |
|                                                                           |
|  Jamm is free software: you can redistribute it and/or modify             |
|  it under the terms of the GNU General Public License as published by     |
|  the Free Software Foundation version 3 of the License.                   |
|                                                                           |
|  Jamm is distributed in the hope that it will be useful,                  |
|  but WITHOUT ANY WARRANTY; without even the implied warranty of           |
|  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
|  GNU General Public License for more details.                             |
|                                                                           |
|  You should have received a copy of the GNU General Public License        |
|  along with this program.  If not, see <http://www.gnu.org/licenses/>.    |
***************************************************************************/

/***************************************************************************|
|                               WARNING                                     |
|        This file is generated by the jamm stub generator jammgen.         |
|       Don't edit, it will be overriden at the next run of jammgen.        |
***************************************************************************/

#ifndef DIMMABLELIGHT_CTRL_H
#define DIMMABLELIGHT_CTRL_H

#include <Jamm/Upnp.h>

class DimmingController
{
    friend class DimmableLightController;

public:
    void SetLoadLevelTarget(const Jamm::ui1& newLoadlevelTarget);
    void GetLoadLevelTarget(Jamm::ui1& retLoadlevelTarget);
    void GetLoadLevelStatus(Jamm::ui1& retLoadlevelStatus);

    void _reqSetLoadLevelTarget(const Jamm::ui1& newLoadlevelTarget);
    void _reqGetLoadLevelTarget();
    void _reqGetLoadLevelStatus();

    Jamm::ui1 _getLoadLevelStatus();

protected:
    virtual void _ansSetLoadLevelTarget(const Jamm::ui1& newLoadlevelTarget) = 0;
    virtual void _ansGetLoadLevelTarget(const Jamm::ui1& retLoadlevelTarget) = 0;
    virtual void _ansGetLoadLevelStatus(const Jamm::ui1& retLoadlevelStatus) = 0;

    virtual void _changedLoadLevelStatus(const Jamm::ui1& val) = 0;

private:
    void _threadSetLoadLevelTarget(Jamm::Action* pAction);
    void _threadGetLoadLevelTarget(Jamm::Action* pAction);
    void _threadGetLoadLevelStatus(Jamm::Action* pAction);

    Jamm::Service* m_pService;
};

class SwitchPowerController
{
    friend class DimmableLightController;

public:
    void SetTarget(const bool& NewTargetValue);
    void GetTarget(bool& RetTargetValue);
    void GetStatus(bool& ResultStatus);

    void _reqSetTarget(const bool& NewTargetValue);
    void _reqGetTarget();
    void _reqGetStatus();

    bool _getStatus();

protected:
    virtual void _ansSetTarget(const bool& NewTargetValue) = 0;
    virtual void _ansGetTarget(const bool& RetTargetValue) = 0;
    virtual void _ansGetStatus(const bool& ResultStatus) = 0;

    virtual void _changedStatus(const bool& val) = 0;

private:
    void _threadSetTarget(Jamm::Action* pAction);
    void _threadGetTarget(Jamm::Action* pAction);
    void _threadGetStatus(Jamm::Action* pAction);

    Jamm::Service* m_pService;
};


class DimmableLightController : public Jamm::ControllerImplAdapter
{
public:
    DimmableLightController(Jamm::Device* pDevice, SwitchPowerController* pSwitchPowerController, DimmingController* pDimmingController);

    SwitchPowerController* SwitchPower() { return m_pSwitchPowerController; }
    DimmingController* Dimming() { return m_pDimmingController; }

private:
    virtual void eventHandler(Jamm::StateVar* pStateVar);

    Jamm::Device* m_pDevice;
    SwitchPowerController* m_pSwitchPowerController;
    DimmingController* m_pDimmingController;
};

#endif

