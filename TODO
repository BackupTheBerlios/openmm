current FIXMES:
// FIXME: [platinum] gives empty responses to action requests
// FIXME: [mediatomb] sometimes doesn't response to M-SEARCHES ...?

------------------------------------------------------

current TODOS:
// TODO: hide more details of *Controllers, Device in the UserInterface interface (like renderer engine)
//       for example: play() instead of 
// TODO: [jammgen] dispatch actions not in the "great action dispatcher" but pass the dispatching
//       to the corresponding services. This avoids double code in devices that have the same service
//       and may eliminate the friend class statement.
// TODO: [jammgen] remove Device* m_pDevice
// TODO: [jammgen, Upnp] the name ControllerImplAdapter may be misleading
// TODO: [jammgen] MediaServer::m_pContentDirectoryImpl protected instead of private?


// TODO: proper deep deletion of DeviceRoot in dtor (-> ~Container)
// TODO: Variant: catch conversion errors with log message
// NOTE: Embedded Devices:
// -> HTTP server for controlling and eventing should move from DeviceRoot into Device
// -> only SSDP stuff should be in DeviceRoot
// -> this way ControlURL of same Service can be the same for all embedded devices
// -> albeit: BaseURL is device description (and thus DeviceRoot) related
// -> so nope: ControlURLs of embedded devices of same type must differ, as they are relative to BaseURL
// TODO: BaseURL is LOCATION in rootdevice SSDP message !!! All other URLs refer to this
// TODO: Find a proper interface for the readers and writers
// TODO: complete event messaging
// TODO: OPTIONAL stuff: optional services, actions: configure it via ImplAdapter and rewrite description
//       accordingly


// TODO: Remaining Event subscription stuff
// TODO: Remaining SSDP M-Search requests
// TODO: Device configuration
// TODO: Error handling
// TODO: Variable query (only for Device)
// TODO: Service and Device version checking
// TODO: Presentation


longterm TODOS:

------------------------------------------------------

JammC
1. put server into browse tree - DONE
2. AVTransport and controls (QAbstractButton, QButtonGroup) - DONE
3. renderer chooser - DONE
4. slider (QAbstractSlider) and seecking - DONE
5. volume and AVRender controls - volume DONE
6. playlist
7. status box with time and meta info
8. resume
9. handle dynamic changes in objects (TV channel lists ...)

JammS
1. JammS - web:
   proxy for webradio (shoutcast ...)

JammR
1. hide pointer
2. window size management
3. multiple audio devices (each announced by seperate renderer device)

------------------------------------------------------

basic browser optimization:
1. lazy population of data model - DONE
1.1. hasChildren() checks if parent is container (empty containers o.k.?)
    advantage: caching is easier
    disadvantage: in case of children two browse queries are requiered 
(however, the first is most likely already in the cache)
1.2. set hasChildren() unconditionally true

2. performance optimization for large amounts of data - DONE
browse n objects (first slice)
-> what's best n: display dependend? double size of rows in display? 
smaller than display?
N = number of total objects in container
if n < N:
  canFetchMore() should return true (set a flag in cache)
  fetchMore() browses next slice ...

3. bredcrump view - DONE (but still looks ugly)
4. more intelligent caching (aging cache) to save memory
5. parent(): reduce number of browse queries (not possible ...?)

------------------------------------------------------

refactor:
1. abstract out UPnP and provide an interface to a UPnP plugin - DONE
   (do all UPnP-AV stuff within libjamm)
2. implement other UPnP backends (based on libupnp for example) - DONE
3. messaging system based on UPnP messaging - NOT NEEDED ANYMORE
   (extend JSignal across threads/processes)
4. abstract out Qt and provide an interface to a gui plugin
5. implement other GUI backends

------------------------------------------------------

platforms:
1. anubis
   faster boot from flash - DONE
   general purpose x86 image

2. aaron
   SheevaPlug image ...?

3. argus
   Zaurus image ...?
   Nokia i800 image ...?

------------------------------------------------------

further steps:
1. add cmake checks for (depending on compile time options for the different plugins):
   libplatinumupnp - NOT NEEDED ANYMORE
   mplayer as runtime dependency
   libvlc
   libxine

------------------------------------------------------

future steps/ideas:
1. look & feel, icon decoration (for servers and album covers)
2. theming
3. dynamic configuration of layout (floating boxes)
4. plugins: webbrowser, lirc
5. input methods: touch screen, gestures, infrared
6. globbing '*' in bredcrump view
7. search box
8. commandline controler (jammcc)
9. flexible integration of controler, renderer, and servers
10. time markers (noad)
11. drap and drop of local files (use local media server or URI file://)
12. upload of files to media server
13. exclusive locking of a renderer for one control

concepts/ideas:
1. replace upnp browsing with html browsing. special meta tag: 
   "play with upnp-renderer(server_uuid, object_id)" and pass this from
   the webbrowser-part selection to the renderer part.
   also a flag is needed to indicate, wether upnp browsing should be
   replaced with web browsing.

2. firefox browser plugin for renderer

3. integration into KDE or any other DE.
   especially the feature to choose a UPnP renderer for output

