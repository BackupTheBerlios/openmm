next steps:

JammC
1. put server into browse tree - DONE
2. AVTransport and controls (QAbstractButton, QButtonGroup) - DONE
3. renderer chooser - DONE
4. slider (QAbstractSlider) and seecking - DONE
5. volume and AVRender controls - volume DONE
6. playlist
7. status box with time and meta info
8. resume
9. handle dynamic changes in objects (TV channel lists ...)

JammS
1. JammS - web:
   proxy for webradio (shoutcast ...)

JammR
1. hide pointer
2. window size management
3. multiple audio devices (each announced by seperate renderer device)

------------------------------------------------------

basic browser optimization:
1. lazy population of data model - DONE
1.1. hasChildren() checks if parent is container (empty containers o.k.?)
    advantage: caching is easier
    disadvantage: in case of children two browse queries are requiered 
(however, the first is most likely already in the cache)
1.2. set hasChildren() unconditionally true

2. performance optimization for large amounts of data - DONE
browse n objects (first slice)
-> what's best n: display dependend? double size of rows in display? 
smaller than display?
N = number of total objects in container
if n < N:
  canFetchMore() should return true (set a flag in cache)
  fetchMore() browses next slice ...

3. bredcrump view - DONE (but still looks ugly)
4. more intelligent caching (aging cache) to save memory
5. parent(): reduce number of browse queries (not possible ...?)

------------------------------------------------------

refactor:
1. abstract out UPnP and provide an interface to a UPnP plugin
   (do all UPnP-AV stuff within libjamm)
2. implement other UPnP backends (based on libupnp for example)
3. messaging system based on UPnP messaging
   (extend JSignal across threads/processes)
4. abstract out Qt and provide an interface to a gui plugin
5. implement other GUI backends

------------------------------------------------------

platforms:
1. anubis
   faster boot from flash
   general purpose x86 image

2. aaron
   SheevaPlug image ...?

3. argus
   Zaurus image ...?
   Nokia i800 image ...?

------------------------------------------------------

further steps:
1. add cmake checks for (depending on compile time options for the different plugins):
   libplatinumupnp
   mplayer as runtime dependency
   libvlc
   libxine

------------------------------------------------------

future steps/ideas:
1. look & feel, icon decoration (for servers and album covers)
2. theming
3. dynamic configuration of layout (floating boxes)
4. plugins: webbrowser, lirc
5. input methods: touch screen, gestures, infrared
6. globbing '*' in bredcrump view
7. search box
8. commandline controler (jammcc)
9. flexible integration of controler, renderer, and servers
10. time markers (noad)
11. drap and drop of local files (use local media server or URI file://)
12. upload of files to media server
13. exclusive locking of a renderer for one control

concepts/ideas:
1. replace upnp browsing with html browsing. special meta tag: 
   "play with upnp-renderer(server_uuid, object_id)" and pass this from
   the webbrowser-part selection to the renderer part.
   also a flag is needed to indicate, wether upnp browsing should be
   replaced with web browsing.

2. firefox browser plugin for renderer

3. integration into KDE or any other DE.
   especially the feature to choose a UPnP renderer for output

