FIND_PATH(POCO_INCLUDE_DIR
Poco/Poco.h
PATHS ${CMAKE_INCLUDE_PATH}
)

FIND_LIBRARY(LIB_POCO_UTIL
NAME PocoUtil
PATHS ${CMAKE_LIBRARY_PATH}
)

if(POCO_INCLUDE_DIR AND LIB_POCO_UTIL)
message(STATUS "Poco headers found in " ${POCO_INCLUDE_DIR})
INCLUDE_DIRECTORIES(
${POCO_INCLUDE_DIR}
)


if(TARGET omm)
SET(LIB_OMM_AV
ommav
)
SET(LIB_OMM_UTIL
ommutil
)
INCLUDE_DIRECTORIES(
${omm_SOURCE_DIR}/lib
)
else(TARGET omm)
FIND_LIBRARY(LIB_OMM_AV
NAME ommav
PATHS ${CMAKE_LIBRARY_PATH}
)
FIND_LIBRARY(LIB_OMM_UTIL
NAME ommutil
PATHS ${CMAKE_LIBRARY_PATH}
)
endif(TARGET omm)

SET( OMMS_TEST_SRCS
TestServer.cpp
)

ADD_LIBRARY( ommserver-test
SHARED
${OMMS_TEST_SRCS}
)

TARGET_LINK_LIBRARIES( ommserver-test
${LIB_OMM_AV}
${LIB_OMM_UTIL}
)

SET( OMMS_SRCS
UpnpAvServerApplication.cpp
)

ADD_EXECUTABLE( ommserve
${OMMS_SRCS}
)

TARGET_LINK_LIBRARIES( ommserve
${LIB_OMM_AV}
${LIB_OMM_UTIL}
${LIB_POCO_UTIL}
)

INSTALL( TARGETS ommserve
RUNTIME DESTINATION bin
LIBRARY DESTINATION lib
)

else(POCO_INCLUDE_DIR AND LIB_POCO_UTIL)
message(STATUS "Poco not found")
endif(POCO_INCLUDE_DIR AND LIB_POCO_UTIL)
